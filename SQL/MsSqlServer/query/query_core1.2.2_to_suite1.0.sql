--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_PARAMETERIZED_QUERY') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CATEGORIAL_CLASS') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_INTRA_MODEL_ASSOCIATION') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_CONSTRAINTS') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_PARAMETERIZED_CONDITION') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_QUERY_ENTITY') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_CONDITION') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_RULE') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_LOGICAL_CONNECTOR') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_EXPRESSION') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_MODEL_ASSOCIATION') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_CONDITION_VALUES') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_JOIN_GRAPH') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CATEGORIAL_ATTRIBUTE') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_OUTPUT_ATTRIBUTE') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_INTER_MODEL_ASSOCIATION') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_EXPRESSION_OPERAND') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_GRAPH_ENTRY') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CATEGORY') DROP TABLE COMMONS_GRAPH;
--IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QUERY_EXPRESSIONID') DROP TABLE COMMONS_GRAPH;


create table QUERY_PARAMETERIZED_QUERY (
   IDENTIFIER bigint not null,
   QUERY_NAME varchar(255),
   DESCRIPTION text
);
alter table QUERY_PARAMETERIZED_QUERY add constraint PK_QRY_PARAMETERIZED_QRY_ID primary key (IDENTIFIER);

create table CATEGORIAL_CLASS (
   ID bigint not null identity,
   DE_ENTITY_ID bigint,
   PATH_FROM_PARENT_ID bigint,
   PARENT_CATEGORIAL_CLASS_ID bigint
);
alter table CATEGORIAL_CLASS add constraint PK_CATEGORIAL_CLASS_ID primary key (ID);

create table QUERY_INTRA_MODEL_ASSOCIATION (
   IDENTIFIER bigint not null,
   DE_ASSOCIATION_ID bigint not null
);
alter table QUERY_INTRA_MODEL_ASSOCIATION add constraint PK_QRY_INTRA_MODEL_ASSO_ID primary key (IDENTIFIER);

create table QUERY_CONSTRAINTS (
   IDENTIFIER bigint not null identity,
   QUERY_JOIN_GRAPH_ID bigint 
);
alter table QUERY_CONSTRAINTS add constraint PK_QUERY_CONSTRAINTS_ID primary key (IDENTIFIER);

create table QUERY_PARAMETERIZED_CONDITION (
   IDENTIFIER bigint not null,
   CONDITION_INDEX integer,
   CONDITION_NAME varchar(255)
);
alter table QUERY_PARAMETERIZED_CONDITION add constraint PK_QRY_PARAMETERIZED_COND_ID primary key (IDENTIFIER);

create table QUERY_QUERY_ENTITY (
   IDENTIFIER bigint not null identity,
   ENTITY_ID bigint not null
);
alter table QUERY_QUERY_ENTITY add constraint PK_QUERY_QUERY_ENTITY_ID primary key (IDENTIFIER);

create table QUERY_CONDITION (
   IDENTIFIER bigint not null identity,
   ATTRIBUTE_ID bigint not null,
   RELATIONAL_OPERATOR varchar(255),
   QUERY_RULE_ID bigint,
   POSITION integer
);
alter table QUERY_CONDITION add constraint PK_QUERY_CONDITION_ID primary key (IDENTIFIER);

create table QUERY_RULE (
   IDENTIFIER bigint not null,
   QUERY_EXPRESSION_ID bigint not null
);
alter table QUERY_RULE add constraint PK_QUERY_RULE_ID primary key (IDENTIFIER);

create table QUERY (
   IDENTIFIER bigint not null identity,
   QUERY_CONSTRAINTS_ID bigint
);
alter table QUERY add constraint PK_QUERY_ID primary key (IDENTIFIER);

create table QUERY_LOGICAL_CONNECTOR (
   IDENTIFIER bigint not null identity,
   LOGICAL_OPERATOR varchar(255),
   NESTING_NUMBER integer,
   QUERY_EXPRESSION_ID bigint,
   POSITION integer
);
alter table QUERY_LOGICAL_CONNECTOR add constraint PK_QRY_LOGICAL_CONNECTOR_ID primary key (IDENTIFIER);

create table QUERY_EXPRESSION (
   IDENTIFIER bigint not null identity,
   QUERY_EXPRESSIONID_ID bigint,
   QUERY_QUERY_ENTITY_ID bigint not null,
   IS_IN_VIEW bit,
   IS_VISIBLE bit,
   QUERY_CONSTRAINT_ID bigint
);
alter table QUERY_EXPRESSION add constraint PK_QUERY_EXPRESSION_ID primary key (IDENTIFIER);

create table QUERY_MODEL_ASSOCIATION (
   IDENTIFIER bigint not null identity
);
alter table QUERY_MODEL_ASSOCIATION add constraint PK_QRY_MODEL_ASSOCIATION_ID primary key (IDENTIFIER);


create table QUERY_CONDITION_VALUES (
   QUERY_CONDITION_ID bigint not null,
   VALUE_LIST varchar(255),
   POSITION integer not null
);
alter table QUERY_CONDITION_VALUES add constraint PK_QRY_COND_ID_VALUES_POSI primary key (QUERY_CONDITION_ID, POSITION);

create table QUERY_JOIN_GRAPH (
   IDENTIFIER bigint not null identity
);
alter table QUERY_JOIN_GRAPH add constraint PK_QUERY_JOIN_GRAPH_ID primary key (IDENTIFIER);

create table CATEGORIAL_ATTRIBUTE (
   ID bigint not null identity,
   CATEGORIAL_CLASS_ID bigint,
   DE_CATEGORY_ATTRIBUTE_ID bigint,
   DE_SOURCE_CLASS_ATTRIBUTE_ID bigint
);
alter table CATEGORIAL_ATTRIBUTE add constraint PK_CATEGORIAL_ATTRIBUTE_ID primary key (ID);

create table QUERY_OUTPUT_ATTRIBUTE (
   IDENTIFIER bigint not null identity,
   EXPRESSIONID_ID bigint,
   ATTRIBUTE_ID bigint not null,
   PARAMETERIZED_QUERY_ID bigint,
   POSITION integer
);
alter table QUERY_OUTPUT_ATTRIBUTE add constraint PK_QUERY_OUTPUT_ATTRIBUTE_ID primary key (IDENTIFIER);

create table QUERY_INTER_MODEL_ASSOCIATION (
   IDENTIFIER bigint not null,
   SOURCE_SERVICE_URL text not null,
   TARGET_SERVICE_URL text not null,
   SOURCE_ATTRIBUTE_ID bigint not null,
   TARGET_ATTRIBUTE_ID bigint not null
);
alter table QUERY_INTER_MODEL_ASSOCIATION add constraint PK_QUERY_INTER_MODEL_ASSO_ID primary key (IDENTIFIER);

create table QUERY_EXPRESSION_OPERAND (
   IDENTIFIER bigint not null identity,
   QUERY_EXPRESSION_ID bigint,
   POSITION integer
);
alter table QUERY_EXPRESSION_OPERAND add constraint PK_QRY_EXPRESSION_OPERAND_ID primary key (IDENTIFIER);

create table QUERY_GRAPH_ENTRY (
   IDENTIFIER bigint not null identity,
   QUERY_MODEL_ASSOCIATION_ID bigint,
   SOURCE_EXPRESSIONID_ID bigint,
   TARGET_EXPRESSIONID_ID bigint,
   QUERY_JOIN_GRAPH_ID bigint
);
alter table QUERY_GRAPH_ENTRY add constraint PK_QUERY_GRAPH_ENTRY_ID primary key (IDENTIFIER);

create table CATEGORY (
   ID bigint not null identity,
   DE_ENTITY_ID bigint,
   PARENT_CATEGORY_ID bigint,
   ROOT_CATEGORIAL_CLASS_ID bigint
);
alter table CATEGORY add constraint PK_CATEGORY_ID primary key (ID);

create table QUERY_EXPRESSIONID (
   IDENTIFIER bigint not null,
   SUB_EXPRESSION_ID integer not null
);
alter table QUERY_EXPRESSIONID add constraint PK_QUERY_EXPRESSIONID_ID primary key (IDENTIFIER);

alter table QUERY_PARAMETERIZED_QUERY add constraint FK_QRY_PARAMETERIZED_QRY_ID foreign key (IDENTIFIER) references QUERY;
alter table CATEGORIAL_CLASS add constraint FK_CATEGORIAL_CLASS_ID_PARENT foreign key (PARENT_CATEGORIAL_CLASS_ID) references CATEGORIAL_CLASS (ID);
alter table QUERY_INTRA_MODEL_ASSOCIATION add constraint FK_QUERY_INTRA_MODEL_ASSO_ID foreign key (IDENTIFIER) references QUERY_MODEL_ASSOCIATION (IDENTIFIER);
alter table QUERY_CONSTRAINTS add constraint FK_QRY_CONST_QRY_JOIN_GRAPHID foreign key (QUERY_JOIN_GRAPH_ID) references QUERY_JOIN_GRAPH (IDENTIFIER);
alter table QUERY_PARAMETERIZED_CONDITION add constraint FK_QRY_PARAMETERIZED_COND_ID foreign key (IDENTIFIER) references QUERY_CONDITION (IDENTIFIER);
alter table QUERY_CONDITION add constraint FK_QRY_CONDITION_QRY_RULE_ID foreign key (QUERY_RULE_ID) references QUERY_RULE (IDENTIFIER);
alter table QUERY_RULE add constraint FK_QRY_RULE_QRY_EXPRESSION_ID foreign key (QUERY_EXPRESSION_ID) references QUERY_EXPRESSION (IDENTIFIER);
alter table QUERY_RULE add constraint FK_QUERY_RULE_ID foreign key (IDENTIFIER) references QUERY_EXPRESSION_OPERAND (IDENTIFIER);
alter table QUERY add constraint FK_QUERY_QUERY_CONSTRAINTS_ID foreign key (QUERY_CONSTRAINTS_ID) references QUERY_CONSTRAINTS (IDENTIFIER);
alter table QUERY_LOGICAL_CONNECTOR add constraint FK_QRY_LOGI_CONNE_QRY_EXP_ID foreign key (QUERY_EXPRESSION_ID) references QUERY_EXPRESSION (IDENTIFIER);
alter table QUERY_EXPRESSION add constraint FK_QRY_EXP_QRY_EXPID_ID foreign key (QUERY_EXPRESSIONID_ID) references QUERY_EXPRESSIONID (IDENTIFIER);
alter table QUERY_EXPRESSION add constraint FK_QRY_EXP_QRY_CONSTRAINT_ID foreign key (QUERY_CONSTRAINT_ID) references QUERY_CONSTRAINTS (IDENTIFIER);
alter table QUERY_EXPRESSION add constraint FK_QRY_EXP_QRY_QRY_ENTITY_ID foreign key (QUERY_QUERY_ENTITY_ID) references QUERY_QUERY_ENTITY (IDENTIFIER);
alter table QUERY_CONDITION_VALUES add constraint FK_QRY_COND_VAL_QRY_COND_ID foreign key (QUERY_CONDITION_ID) references QUERY_CONDITION (IDENTIFIER);
alter table CATEGORIAL_ATTRIBUTE add constraint FK_CATE_ATTRIBUTE_CATE_CLS_ID foreign key (CATEGORIAL_CLASS_ID) references CATEGORIAL_CLASS (ID);
alter table QUERY_OUTPUT_ATTRIBUTE add constraint FK_QRY_OUTPUT_ATBUTE_EXPID_ID foreign key (EXPRESSIONID_ID) references QUERY_EXPRESSIONID (IDENTIFIER);
alter table QUERY_OUTPUT_ATTRIBUTE add constraint FK_QRY_OPUT_ATBUTE_PAR_QRY_ID foreign key (PARAMETERIZED_QUERY_ID) references QUERY_PARAMETERIZED_QUERY (IDENTIFIER);
alter table QUERY_INTER_MODEL_ASSOCIATION add constraint FK_QRY_INTER_MODEL_ASSO_ID foreign key (IDENTIFIER) references QUERY_MODEL_ASSOCIATION (IDENTIFIER);
alter table QUERY_EXPRESSION_OPERAND add constraint FK_QRY_EXP_OPERAND_QRY_EXP_ID foreign key (QUERY_EXPRESSION_ID) references QUERY_EXPRESSION (IDENTIFIER);
alter table QUERY_GRAPH_ENTRY add constraint FK_QRY_GPH_ERY_QRY_MD_ASSO_ID foreign key (QUERY_MODEL_ASSOCIATION_ID) references QUERY_MODEL_ASSOCIATION (IDENTIFIER);
alter table QUERY_GRAPH_ENTRY add constraint FK_QRY_GPH_ERY_QRY_JIN_GPH_ID foreign key (QUERY_JOIN_GRAPH_ID) references QUERY_JOIN_GRAPH (IDENTIFIER);
alter table QUERY_GRAPH_ENTRY add constraint FK_QRY_GPH_ERY_TAR_EXPID_ID foreign key (TARGET_EXPRESSIONID_ID) references QUERY_EXPRESSIONID (IDENTIFIER);
alter table QUERY_GRAPH_ENTRY add constraint FK_QRY_GPH_ENTRY_SRC_EXPID_ID foreign key (SOURCE_EXPRESSIONID_ID) references QUERY_EXPRESSIONID (IDENTIFIER);
alter table CATEGORY add constraint FK_CATE_PARENT_CATEGORY_ID foreign key (PARENT_CATEGORY_ID) references CATEGORY (ID);
alter table CATEGORY add constraint FK_CATEGORY_ROT_CATE_CLASS_ID foreign key (ROOT_CATEGORIAL_CLASS_ID) references CATEGORIAL_CLASS (ID);
alter table QUERY_EXPRESSIONID add constraint FK_QUERY_EXPRESSIONID_ID foreign key (IDENTIFIER) references QUERY_EXPRESSION_OPERAND;
