//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.06.03 at 06:02:46 PM IST 
//

package edu.wustl.catissuecore.jaxb.domain;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.xml.sax.SAXException;



/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the generated package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _Participant_QNAME = new QName("", "Participant");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: generated
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link ParticipantType }
     * 
     */
    public ParticipantType createParticipantType() {
        return new ParticipantType();
    }

    /**
     * Create an instance of {@link SCGCollectionType }
     * 
     */
    public SCGCollectionType createSCGCollectionType() {
        return new SCGCollectionType();
    }

    /**
     * Create an instance of {@link CoordinatorType }
     * 
     */
    public CoordinatorType createCoordinatorType() {
        return new CoordinatorType();
    }

    /**
     * Create an instance of {@link SpecimenPositionType }
     * 
     */
    public SpecimenPositionType createSpecimenPositionType() {
        return new SpecimenPositionType();
    }

    /**
     * Create an instance of {@link StorageContainerType }
     * 
     */
    public StorageContainerType createStorageContainerType() {
        return new StorageContainerType();
    }

    /**
     * Create an instance of {@link SpecimenCollectionType }
     * 
     */
    public SpecimenCollectionType createSpecimenCollectionType() {
        return new SpecimenCollectionType();
    }

    /**
     * Create an instance of {@link CollectionEventType }
     * 
     */
    public CollectionEventType createCollectionEventType() {
        return new CollectionEventType();
    }

    /**
     * Create an instance of {@link CollectionProtocolRegistrationType }
     * 
     */
    public CollectionProtocolRegistrationType createCollectionProtocolRegistrationType() {
        return new CollectionProtocolRegistrationType();
    }

    /**
     * Create an instance of {@link PrincipalInvestigatorType }
     * 
     */
    public PrincipalInvestigatorType createPrincipalInvestigatorType() {
        return new PrincipalInvestigatorType();
    }

    /**
     * Create an instance of {@link SpecimenCollectionGroupType }
     * 
     */
    public SpecimenCollectionGroupType createSpecimenCollectionGroupType() {
        return new SpecimenCollectionGroupType();
    }

    /**
     * Create an instance of {@link SpecimenEventsType }
     * 
     */
    public SpecimenEventsType createSpecimenEventsType() {
        return new SpecimenEventsType();
    }

    /**
     * Create an instance of {@link CollectionProtocolType }
     * 
     */
    public CollectionProtocolType createCollectionProtocolType() {
        return new CollectionProtocolType();
    }

    /**
     * Create an instance of {@link SpecimenType }
     * 
     */
    public SpecimenType createSpecimenType() {
        return new SpecimenType();
    }

    /**
     * Create an instance of {@link SiteType }
     * 
     */
    public SiteType createSiteType() {
        return new SiteType();
    }

    /**
     * Create an instance of {@link SpecimenCharacteristicsType }
     * 
     */
    public SpecimenCharacteristicsType createSpecimenCharacteristicsType() {
        return new SpecimenCharacteristicsType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ParticipantType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Participant")
    public JAXBElement<ParticipantType> createParticipant(ParticipantType value) {
        return new JAXBElement<ParticipantType>(_Participant_QNAME, ParticipantType.class, null, value);
    }
	
		 public Object unMarshelExportDataXml(String packageName,String fileName,String schemaFile) throws JAXBException, FileNotFoundException, SAXException
    {
    	JAXBContext context =JAXBContext.newInstance(packageName) ;
        Unmarshaller unmarshaller =context.createUnmarshaller() ;
        Source schemaSource = new StreamSource(this.getClass().getClassLoader().getResourceAsStream(schemaFile));
        Schema mySchema = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema").newSchema(schemaSource);
        unmarshaller.setSchema(mySchema);
        return unmarshaller.unmarshal(new FileInputStream(fileName)) ;
    }

    public void marshelExportDataXml(String packageName,String fileName,Object obj) throws JAXBException, FileNotFoundException
    {
    	JAXBContext context =JAXBContext.newInstance(packageName) ;
        Marshaller marshaller =context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
        marshaller.marshal(obj, new FileOutputStream(fileName)) ;
    }

	
}
