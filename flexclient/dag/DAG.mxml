<?xml version="1.0" encoding="utf-8"?>

<mx:Application  xmlns:mx="http://www.adobe.com/2006/mxml" 
layout="vertical" dragEnter="doDragEnter(event)" dragDrop="onDragDrop(event)" dragExit="onDragExit(event)"
xmlns:Components="Components.*" xmlns:display="flash.display.*"
creationComplete="initApp()"  width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
<mx:Script>
<![CDATA[
	import mx.controls.DateField;
	import Util.Utility;
	import mx.controls.Label;
	import mx.utils.StringUtil;
	import Components.DAGPath;
	import mx.controls.ComboBase;
	import Components.DAGConstants;
	import mx.containers.HBox;
	import mx.controls.ComboBox;
    import mx.controls.ToolTip;
    import mx.managers.ToolTipManager;
	import mx.containers.VBox;
	import mx.controls.Button;
	import mx.utils.ArrayUtil;
	import mx.controls.DataGrid;
	import mx.containers.Accordion;
	import mx.controls.List;
	import Components.Association;
	import Components.DAGPath;
	import mx.collections.ArrayCollection;
	import mx.states.SetEventHandler;
	import mx.core.UIComponent;
	import Components.DAGNode;
	import mx.containers.Canvas;
	import mx.core.IUIComponent;
	import mx.controls.Alert;
	import mx.events.DragEvent;
	import mx.core.DragSource;
	import mx.managers.DragManager;
	import mx.events.MenuEvent;
	import flash.external.ExternalInterface;
	import mx.controls.Alert;
	import mx.rpc.events.ResultEvent;
	import mx.rpc.remoting.RemoteObject;
	import mx.rpc.events.FaultEvent;
	import flash.net.registerClassAlias;
	import Components.AmbiguityPanel;
	import mx.managers.PopUpManager;
   	import mx.core.IFlexDisplayObject;
   	import mx.containers.ControlBar;
    import mx.controls.Spacer;
    import mx.containers.ControlBar;
   	import mx.controls.Menu;
    import Util.HashMap;
    import mx.managers.CursorManager;
    import Components.CustomFormulaNode;
    import Components.PopupWindow;
    import mx.controls.TextInput;
	//------------------------
	public var node1:String = "";
	public var node2:String = "";
	private var selectedLink:String = "";
	private var selectedNode:DAGNode=null;
    private var ambiguityPanel:AmbiguityPanel; 
    private var title:String  = new String();
    public var selectedNodeList:ArrayCollection = new ArrayCollection();
    public var count:int = 0;
    private var firstNode:String;
    private var secondNode:String;
 	private var pathStr:String
	private	var isQuery:String = "false";
	private var eNode:DAGNode;
	
	public var readyTimer:Timer;
	public var isOutputView:Boolean=false;

	public var view:String ="";
	public var dagPathUIMap:HashMap;
	public var totalNodes:ArrayCollection;
	public var allPaths:ArrayCollection;

    public var queryDataMap : Object; 
	public var nodeSelected : String = null; 
	public var customFormulaString : String = null;
	
	private var popUp:PopupWindow = null;
	
	private var repaintDAGNodeMap : HashMap = new HashMap();
	
	/**
	* Timer handler  to check container has been initialized.	
	*/
	private function timerHandler():void
	{
		if (isContainerReady())
		{
			// If the container is ready, register the SWF functions.
			setUpCall();
			readyTimer.stop();
		}
	}
	/**
	* Initilise call-back call to java script methods.
	*/
	public function setUpCall():void 
	{
		ExternalInterface.addCallback("createNode",createNode);		
		ExternalInterface.addCallback("editLimit",editLimit);	
		ExternalInterface.addCallback("searchResult",searchResult);	
		ExternalInterface.addCallback("addNodeToView",addNodeToView);
		ExternalInterface.addCallback("isDAGEmpty",isDAGEmpty);
	}
	
	/**
	* Setup the callback function so that HTML can call flex methods
	* Checks wheather HTML page is loaded or not.
	*/
	private function isContainerReady():Boolean
	{
		var result:Boolean = ExternalInterface.call("isReady");
		return result;
	}
	/**
	* Function to check DAG empty on click of search
	*/
	public function isDAGEmpty():Boolean
	{
		if(totalNodes.length==0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	/**
	* Remote Call fault handler
	*/	
	private function faultHandler (event:FaultEvent):void
	{
		Alert.show(event.fault.faultString, 'Error');
	}
	/**
	* To drag nodes on UI
	*/
	private function doDrag(event:MouseEvent):void
	{
		var dragInitiator:DAGNode = DAGNode(event.currentTarget);
		var ds:DragSource = new DragSource();
		
		var canvasProxy:DAGNode = new DAGNode();
		canvasProxy.nodeNumber = dragInitiator.nodeNumber;
		canvasProxy.nodeName =dragInitiator.nodeName;
				
		var pointOffSet:Point = new Point(dragInitiator.mouseX,dragInitiator.mouseY);
		ds.addData(pointOffSet,"point");
		
		DragManager.doDrag(dragInitiator,ds,event,canvasProxy,0,0);
		
		nodeSelected = "DagNode";
	}
	/**
	* To drag nodes on UI
	*/
	private function doDragEnter(event:DragEvent):void{
		DragManager.acceptDragDrop(event.currentTarget as IUIComponent)
	}
	
	private function onDragExit(event : DragEvent):void
	{
		 //var firstDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node1));
	   //var secondDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node2)); 
		
	}
	
   /**
	* To drag nodes on UI
	*/	
	private function onDragDrop(event:DragEvent):void{
		
		var pointOffSet:Point = null;
		var pt:Point = null;
		var customNodeName : String = null;
		var customNode : CustomFormulaNode = null;
	    var firstDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node1));
	    var secondDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node2)); 

		if(nodeSelected == "DagNode")
		{
		var dagNode:DAGNode = DAGNode(event.dragInitiator) ;
		pointOffSet = Point(event.dragSource.dataForFormat("point") );
		
		pt = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = mainPanel.globalToContent(pt);
		
		dagNode.x = pt.x;
		dagNode.y = pt.y;

		var ass:Association;
		var inAssociations:ArrayCollection;
		var inAsslength:int;
		var outAssociations:ArrayCollection;
		var outAsslength:int;
		var displayoutAssociations:ArrayCollection=dagNode.displayoutAssociations;
		var displaylength:int=displayoutAssociations.length
		var path:DAGPath=null;
		//Outgoing associations
		var operatorIndex:int =0; 
		outAssociations = dagNode.outAssociations;
		outAsslength = outAssociations.length;
		for(var i:int=0;i<outAsslength;i++)
		{
			ass = Association(outAssociations.getItemAt(i));
			//dagNode.name)//src
			mainPanel.removeChild(mainPanel.getChildByName(ass.associatedLink));
			path = dagPathUIMap.getValue(ass.associatedLink);
			dagPathUIMap.remove(ass.associatedLink);

			dagNode.removeDisplayOutAssociation(ass.associatedNode,ass.associatedLink);
			dagNode.removeOutAssociation(ass.associatedNode,ass.associatedLink);

			DAGNode(mainPanel.getChildByName(ass.associatedNode)).removeInAssociation(dagNode.name,ass.associatedLink);
			linkNodes(dagNode.name,ass.associatedNode,path);
			
		}
		
		//Incoming associations
		inAssociations = dagNode.inAssociations;
		inAsslength = inAssociations.length;
		for(var k:int=0;k<inAsslength;k++)
		{
			ass = Association(inAssociations.getItemAt(k));
			
			mainPanel.removeChild(mainPanel.getChildByName(ass.associatedLink));
			path = dagPathUIMap.getValue(ass.associatedLink);
			dagPathUIMap.remove(ass.associatedLink);

			dagNode.removeInAssociation(ass.associatedNode,ass.associatedLink);
			DAGNode(mainPanel.getChildByName(ass.associatedNode)).removeDisplayOutAssociation(dagNode.name,ass.associatedLink);
			DAGNode(mainPanel.getChildByName(ass.associatedNode)).removeOutAssociation(dagNode.name,ass.associatedLink);
			linkNodes(ass.associatedNode,dagNode.name,path);
		}
		
		//Redrawing the lines between the selected nodes and custom formula node
		if((firstDAGNode != null) && (secondDAGNode != null))
		{
			 customNodeName = firstDAGNode.nodeNumber + "_" + secondDAGNode.nodeNumber;
			 customNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode;
		     if(customNode != null)
		     {
		     	drawLines(firstDAGNode, customNode.x,customNode.y,customNode.name);
		     	drawLines(secondDAGNode, customNode.x,customNode.y,customNode.name);
		     }
		
		} 
	  
	 }
	 else
	 {
	 	var cutomformulaNode : CustomFormulaNode = CustomFormulaNode(event.dragInitiator) ;
		pointOffSet = Point(event.dragSource.dataForFormat("point") );
		
	    pt = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = mainPanel.globalToContent(pt);
		
		cutomformulaNode.x = pt.x;
		cutomformulaNode.y = pt.y;
		
		//Redrawing the lines between the selected nodes and custom formula node
		if((firstDAGNode != null) && (secondDAGNode!= null))
		{
			 customNodeName = firstDAGNode.nodeNumber + "_" + secondDAGNode.nodeNumber;
			 customNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode;
		     if(customNode != null)
		     {
		     	drawLines(firstDAGNode, customNode.x,customNode.y,customNode.name);
		        drawLines(secondDAGNode, customNode.x,customNode.y,customNode.name);
		     }

		} 


	 }	

	}
	/**
	* Initilization handler
	*/		
	private function initFlexInterfaceHandler(event: ResultEvent):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,initFlexInterfaceHandler,false);
	}
	/**
	* Restoring query object from session
	*/
	private function restoreQueryObjectHandler(event: ResultEvent):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,restoreQueryObjectHandler,false);
		rpcService.addEventListener(ResultEvent.RESULT,repaintHandler);
	 	rpcService.repaintDAG();
	}
	/**
	* Initilization of DAG
	*/
	private function initApp():void
	{
		
		registerClassAlias("edu.wustl.catissuecore.flex.dag.DAGNode", DAGNode);
		registerClassAlias("edu.wustl.catissuecore.flex.dag.DAGPath", DAGPath);
		registerClassAlias("edu.wustl.catissuecore.flex.dag.CustomFormulaNode",CustomFormulaNode);
//		rpcService= new RemoteObject();
		rpcService.channelSet = Utility.getChannelSet();
		rpcService.destination="cdeService";
		isQuery =Application.application.parameters.isQuery;
		view= Application.application.parameters.view;
		dagPathUIMap = new HashMap();
		totalNodes = new ArrayCollection();
		allPaths = new ArrayCollection();
		if (isContainerReady())
			{
			// If the container is ready, register the SWF functions.
				setUpCall();
			}
			else
			{
				/* If the container is not ready, set up a Timer to call the
				container at 100ms intervals. Once the container responds that
				is ready, the timer will be stopped. */
				readyTimer = new Timer(100);
				readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				readyTimer.start();
			}
		
			if(view==DAGConstants.ADD_LIMIT_VIEW)
			{
				if(isQuery=="true")
				{
					rpcService.addEventListener(ResultEvent.RESULT,restoreQueryObjectHandler);
					rpcService.restoreQueryObject();
				}
				else
				{
					rpcService.initFlexInterface();
					rpcService.addEventListener(ResultEvent.RESULT,initFlexInterfaceHandler);
					rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
				}
			}
			else
		 	{
		 		rpcService.addEventListener(ResultEvent.RESULT,restoreQueryObjectHandler);
				rpcService.restoreQueryObject();
		    }
		  
	}
	/**
	* Repaint handler DAG on NEXT, PREVIOUS and REDEFINE buttons.
	*/
	private function repaintHandler(event: ResultEvent):void
	{
		var nodeMap : Object =  event.result as Object ;
		
		var customNodeList : ArrayCollection = nodeMap["customFormulaNodeList"];
		//Alert.show("Custom Node List is:"+customNodeList.length);
		var nodeList:ArrayCollection = nodeMap["dagNodeList"];
		for(var i:int=0;i<nodeList.length;i++)
		{
			var node:DAGNode = nodeList.getItemAt(i) as DAGNode;
			var xpos:int =0;
			var ypos:int =0;
			var nodeColor:int=0xFFFFAA;
			
			node.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
			node.addEventListener(MouseEvent.CLICK,updateNodeSelection);	
			var hideNodeFlag:Boolean=false;
			switch(node.nodeType)
			{
				case DAGConstants.CONSTRAINT_VIEW_NODE:	
						nodeColor=0xFFFFAA
						break;
				case DAGConstants.CONSTRAINT_ONLY_NODE:
						nodeColor=0xffb693;
						break;
				case DAGConstants.VIEW_ONLY_NODE:
						if(isQuery == "true")
						{
							hideNodeFlag=true;					
						}
						else
						{
							nodeColor =0xff8080;
						}
						break;
				default:																
						nodeColor=0xFFFFAA;	
			}	
			
			xpos = node.x;
			ypos = node.y;
			node.initializeNode(node.nodeName,node.nodeType,node.expressionId,node.toolTip,xpos,ypos,nodeColor);
			if(hideNodeFlag)
			{
				hideNodeFlag=false;	
			}
			else
			{
				mainPanel.addChild(node);
			}
			totalNodes.addItem(node);
		}
		for(var i:int=0;i<nodeList.length;i++)
		{
			var sourceNode:DAGNode = nodeList.getItemAt(i) as DAGNode;	
			var associationList:ArrayCollection = sourceNode.associationList;
			var dagPathList:ArrayCollection = sourceNode.dagpathList;
			var operatorList:ArrayCollection = sourceNode.operatorList;

			 for(var j:int=0;j<associationList.length;j++)
			 {	
			    var targetNode:DAGNode = associationList.getItemAt(j) as DAGNode;	
				var path:DAGPath = dagPathList.getItemAt(j) as DAGPath;

				if(operatorList!=null && operatorList.length!=0)
				{
				    var operator:String = operatorList.getItemAt(j) as String;
					var operatorSelectedIndex:int=0;
				    if(operator=="OR")
				    {
				     	path.operatorIndex=1;
				    }
				}
				try
                {
					if(isQuery == "true")
					{
						sourceNode.enable=true;
						if(sourceNode.nodeType!=DAGConstants.VIEW_ONLY_NODE)
						{
							linkNodes(sourceNode.expressionId.toString(),targetNode.expressionId.toString(),path);
					    }
					}
					else
					 {
						sourceNode.enable=false;
						linkNodes(sourceNode.expressionId.toString(),targetNode.expressionId.toString(),path);
					 }
                
                }catch(error:TypeError)
                {
                	Alert.show("Error:"+error.message);	
                }
			 	
			 }
		}
		currentExp.text = getExprssionString();
		
		//repainting the Custom Node
		repaintCustomNode(customNodeList, nodeList);
		
		rpcService.removeEventListener(ResultEvent.RESULT,repaintHandler,false)
	}
	
	private function repaintCustomNode(customNodeList : ArrayCollection, dagNodeList : ArrayCollection): void
	{
		for(var i: int=0; i<customNodeList.length; i++)
		{
		    var customNode : CustomFormulaNode = customNodeList.getItemAt(i) as CustomFormulaNode;
		    var customNodeName : String = customNode.name;
		    var nodeIds : Array = customNode.name.split("_");
		    var firstNodeId : String = nodeIds[0];
		    var secondNodeId : String = nodeIds[1];
		    var repaintDagNodeList : ArrayCollection = new ArrayCollection();
		    for(var j : int=0; j< dagNodeList.length; j++)
		    {
		    	var dagNode : DAGNode = dagNodeList.getItemAt(j) as DAGNode;
		    	if((dagNode.expressionId.toString() == firstNodeId) ||(dagNode.expressionId.toString() == secondNodeId))
		    	{
		    		//Put that node in List
		    		repaintDagNodeList.addItem(dagNode);
		    	}
		    }
		    repaintDAGNodeMap.put(customNodeName,repaintDagNodeList);
            
            addCustomFromulaNode(customNode);
		}
	}
	
	
	/**
     * Adds node in define result view
     * @param nodesStr name of node
     */
	public function addNodeToView(nodesStr:String):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,repaintHandler);
		rpcService.addEventListener(ResultEvent.RESULT,addNodeToViewHandler);
		rpcService.addNodeToView(nodesStr);
	}	
	/**
     * Handler to add node in define result view. 
     */	
	private function addNodeToViewHandler(event: ResultEvent):void 		
	{
		var node:DAGNode = event.result as DAGNode;
		if(node!=null)
		{
			isOutputView = true;
			this.addNode(node);
		}
		rpcService.removeEventListener(ResultEvent.RESULT,addNodeToViewHandler,false);
	}
	/**
	 * Search Result. 
	 */		
	public function searchResult():void
	{
		rpcService.addEventListener(ResultEvent.RESULT,searchResultHandler);
		rpcService.getSearchResult();
	}
	/**
	 * Search Result handler. 
	 */	
	private function searchResultHandler(event: ResultEvent):void 
	{
		var status:int =event.result as int;
				
		switch(status)
		{
			case DAGConstants.SUCCESS:
							ExternalInterface.call("showViewSearchResultsJsp");
							break;
			case DAGConstants.NO_RESULT_PRESENT:
							showValidationMessagesToUser(DAGConstants.NO_RESULT_PRESENT_MESSAGE);
							break;
			case DAGConstants.EMPTY_DAG:
							showValidationMessagesToUser(DAGConstants.EMPTY_DAG_MESSAGE);
							break;
			case DAGConstants.MULTIPLE_ROOT:
							showValidationMessagesToUser(DAGConstants.MULTIPLE_ROOT_MESSAGE);
							break;
			case DAGConstants.CLASS_NOT_FOUND:
							showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
							break;
			case DAGConstants.SQL_EXCEPTION:
							showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
							break;
			case DAGConstants.DAO_EXCEPTION:
							showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
							break;
			case DAGConstants.TREE_NODES_LIMIT:		
							ExternalInterface.call("openDecisionMakingPage");		
							break;
			case DAGConstants.NO_MAIN_OBJECT_IN_QUERY:		
							ExternalInterface.call("showMainObjectNotPresentMessage");		
							break;
			default:break; 				
		}
		rpcService.removeEventListener(ResultEvent.RESULT,searchResultHandler,false);
		
	}
	/**
	 *Show validation messages. 
	 */	
	public function showValidationMessagesToUser(errorMessage:String):void
	{
		var paramArray:Array = new Array(errorMessage);
		ExternalInterface.call("showValidationMessages",paramArray);
	}
	/**
	* Adds node to DAG
	* @param strToCreateQueyObject contraint string to create node
	* @param entityName node name
	*/
	public function createNode(strToCreateQueyObject:String,entityName:String):void
	{
		
		if(strToCreateQueyObject=="")	
		{
			showValidationMessagesToUser(DAGConstants.EMPTY_LIMIT_ERROR_MESSAGE);
		}
		else
		{
			rpcService.addEventListener(ResultEvent.RESULT,getNodeResultHandler);
			rpcService.createNode(strToCreateQueyObject,entityName);
		}
	}
	/**
	* Link node Handler
	*/
	public function linkNodesHandler(event: ResultEvent):void
	{
		var selectedList:ArrayCollection =  event.result  as  ArrayCollection;

		var path:DAGPath =null;
		if(selectedList!=null)
		{
			if(selectedList.length!=0)
			{
				path = selectedList.getItemAt(0) as DAGPath;
				linkNodes(firstNode,secondNode,path);
			}
			else
			{
				Alert.show("Cannot connect selected nodes as it creates cycle in the query graph");
			}
				
		}
		else
		{
			Alert.show("No association present or no association selected.");
		}
		rpcService.removeEventListener(ResultEvent.RESULT,linkNodesHandler,false);
	}
/*	//code for multiple association
		if(selectedList.length > 0 )
			{
				
				var numAssociation:int=selectedList.length
				for(var i:int;i<numAssociation;i++)
				{
					
					path = selectedList.getItemAt(i) as DAGPath;
					path.operatorIndex=0;
					linkNodes(firstNode,secondNode,path);
				}
				selectedList=null;
			}
			else
			{
				path = selectedList.getItemAt(0) as IDAGPath;
				linkNodes(firstNode,secondNode,path);
			}
			//linkCount++;
		}*/

	
	/**
	*Add node handler
	*/
	public function getNodeResultHandler(event: ResultEvent):void
	{
		var node:DAGNode = event.result as DAGNode;
		if(node!=null)
		{
			if(node.errorMsg=="")
			{
				this.addNode(node);
				showValidationMessagesToUser("");
			}
			else
			{
				showValidationMessagesToUser(node.errorMsg);
				node.errorMsg="";
			}
		}
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
	}
	/**
	* Creates Ambiguity Popup
	*/        
	private function createPopUp():void {
	    PopUpManager.addPopUp(ambiguityPanel,this,true);
	    PopUpManager.centerPopUp(ambiguityPanel);  
	    }
	
	/**
	* Actula addition of node on DAG panel.
	*/
	private function addNode(node:DAGNode):void
	{
		
		var newNode:DAGNode = new DAGNode();
		var toolTipStr:String="";
		var x:int=0;
		var y:int=0;
		var nodeColor:int=0;
		
		if(isOutputView)
		{
			nodeColor =0xff8080;
			toolTipStr="";
		}
		else
		{
			nodeColor =0xFFFFAA;
			toolTipStr=node.toolTip;
		}
		if(mainPanel.getChildren().length==1)
		{
			x = 20;
			y = (mainPanel.y+40);
		}
		else
		{ 
			var length:int=mainPanel.getChildren().length;
			x = 20;
			y = (mainPanel.y+50)+(40*length);
		}
		newNode.dagpathList = new ArrayCollection();			
		
		newNode.initializeNode(node.nodeName,node.nodeType,node.expressionId,toolTipStr,x,y,nodeColor);
		newNode.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
		newNode.addEventListener(MouseEvent.CLICK,updateNodeSelection);
		mainPanel.addChild(newNode);
		totalNodes.addItem(newNode);
		currentExp.text =getExprssionString();
	}
	/**
	 Draw link between 2 nodes. 
	*/
	private function drawLine():void{
		CursorManager.setBusyCursor();
		
		var dagNode1:DAGNode = DAGNode(mainPanel.getChildByName(node1));
		
		var dagNode2:DAGNode = DAGNode(mainPanel.getChildByName(node2));
			
		if(dagNode1 == null || dagNode2 == null)
		{
			Alert.show("Please select two nodes to link");
			 CursorManager.removeBusyCursor();	
		}
		else
		{
			if(dagNode1.getOutAssociation(node2) != null)
			{
				Alert.show("An association already exists between selected nodes");
		  		 CursorManager.removeBusyCursor();   	   
			}
			else
			{
				link(node1,node2);
			}
		}
	}
	/**
	Path handler.
	*/
	public function getPathHandler(event: ResultEvent):void
	{
		
		try
		{
		var dagpath:DAGPath = new DAGPath();
		ambiguityPanel = new  AmbiguityPanel();
	    ambiguityPanel.title="Ambiguity resolver";
	    
		ambiguityPanel.pathList= event.result as ArrayCollection;
		if(ambiguityPanel.pathList==null || ambiguityPanel.pathList.length==0)
		{
			Alert.show("No paths present.");
		}
		else
		{
			if(ambiguityPanel.pathList.length>1)
			{
				ambiguityPanel.nodeList=selectedNodeList;
				createPopUp();
			}
			else
			{
				rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
				rpcService.addEventListener("result",linkNodesHandler);
				rpcService.linkNodes(selectedNodeList,ambiguityPanel.pathList);
			}
		}
		}catch(error:Error)
		{
			Alert.show("Error"+error.getStackTrace())
		}
		finally
		{
			rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
	        CursorManager.removeBusyCursor();
		}
	}
	/**
	Ambiguity panel cancel handler.
	*/
	public function cancelHandler(nodeList:ArrayCollection):void
	{
			node1="";
			node2="";
			var dagNode1:DAGNode =nodeList[0]as DAGNode;
			var dagNode2:DAGNode =nodeList[1]as DAGNode;
			dagNode1.unSelect();
			dagNode2.unSelect();
			selectedNodeList.removeAll();
			count=0;
			rpcService.removeEventListener(ResultEvent.RESULT,linkNodesHandler,false);
	}
	/**
	Link 2 nodes.
	*/	
	public function link(node1:String,node2:String):void
	{
		
		firstNode=node1;
		secondNode=node2;
		rpcService.addEventListener("result",getPathHandler);
		rpcService.getpaths(selectedNodeList);
	}
	/**
	Link 2 nodes.
	*/	
	public function linkNodes(firstNode:String,secondNode:String,path:DAGPath):void
	{
			var dagNode1:DAGNode = DAGNode(mainPanel.getChildByName(firstNode));
			var dagNode2:DAGNode = DAGNode(mainPanel.getChildByName(secondNode));
			if(dagNode2!=null)	
			{
				if (dagNode1.width==0)
				{
					dagNode1.width = 190;	
				}
				var fromX:int = dagNode1.x+dagNode1.width;
				var fromY:int = dagNode1.y+(15);
				var toX:int = dagNode2.x;
				var toY:int = dagNode2.y+(15);
				
				var vBox:VBox = dagNode1.getChildByName("Association") as VBox;
				vBox.visible=true;
							
				if(path!=null)			
				{
					var newPath:DAGPath = new DAGPath();
					newPath.toolTip = path.toolTip;
					newPath.name = path.id+"_"+path.sourceExpId+"_"+path.destinationExpId;
					newPath.id = path.id;
					newPath.sourceExpId=path.sourceExpId;
					newPath.destinationExpId=path.destinationExpId;
					newPath.operatorIndex=path.operatorIndex;
					//---------------
					newPath.setFromNode(dagNode1);
					newPath.setToNode(dagNode2);
					newPath.setX1(fromX);
					newPath.setY1(fromY);
					newPath.setX2(toX);
					newPath.setY2(toY);
					newPath.draw();
					//-----
					mainPanel.addChild(newPath);
					dagPathUIMap.put(newPath.name,newPath);
					if(!allPaths.contains(newPath.name))
					{
						allPaths.addItem(newPath.name);
					}
								
					dagNode1.attachedNodeMap.put(dagNode2.name,dagNode2);
	   			}
				
				//removing selections
				dagNode1.unSelect();
				dagNode2.unSelect();
				if(dagNode1.nodeType==DAGConstants.VIEW_ONLY_NODE || dagNode2.nodeType==DAGConstants.VIEW_ONLY_NODE)
				{
					dagNode1.addOutAssociation(secondNode,newPath.name,0);
					dagNode2.addInAssociation(firstNode,newPath.name,0);
				}
				else
				{	
					var operatorIndex:int = path.operatorIndex;
				 	dagNode1.addDisplayOutAssociation(secondNode,newPath.name,operatorIndex);
					dagNode1.addOutAssociation(secondNode,newPath.name,operatorIndex);
					dagNode2.addInAssociation(firstNode,newPath.name,operatorIndex);
				}
				node1="";
				node2="";
				selectedNodeList.removeAll();
				count=0;
			}
			currentExp.text = getExprssionString();
	}
							
	/**
	Selectin nodes on DAG
	*/
	public function updateNodeSelection(event:MouseEvent):void {
	selectedNode=null;
		if(event.shiftKey)
		{
			var dagNode:DAGNode = DAGNode(mainPanel.getChildByName(event.currentTarget.name));
			if(dagNode != null)
			{
				if(dagNode.name == node1 )
				{
					if(selectedNodeList!=null)
					{
						if(selectedNodeList.length==2)
						{
							selectedNodeList.removeItemAt(0);
							node1=node2;
							node2="";
						}
						else
						{
							selectedNodeList.removeItemAt(0);
							node1 = "";
						}
						count--;
					
					}
					dagNode.unSelect();
	
				}
				else if(dagNode.name == node2)
				{
					if(selectedNodeList!=null)
					{
						selectedNodeList.removeItemAt(1);
						count--;
					}
					dagNode.unSelect();
					node2 = "";
				}
				else
				{
					if(node1 == "")
					{
						node1 = event.currentTarget.name;
					}
					else
					{							
						if(node2 == "")
						{
							node2 = event.currentTarget.name;
						}
						else
						{
							DAGNode(mainPanel.getChildByName(node1)).unSelect();
							node1 = node2;
							node2 = event.currentTarget.name;
							selectedNodeList.removeItemAt(0);
							count--;
						}
					}
					dagNode.select();
					selectedNode = dagNode;
										
					if(count<2)
					{
						selectedNodeList.addItem(dagNode);
					}
					count++;
				}
			}
		}
		
	}
	/**
	*Edit node 
	*/
	public function editNode(node:DAGNode):void
	{
		eNode=node;
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
		rpcService.getLimitUI(node.expressionId);
		rpcService.addEventListener(ResultEvent.RESULT,limitUIHandler);
		
	}
	/**
	* Show entity information on editing UI
	*/
	public function limitUIHandler(event:ResultEvent):void
	{
		var htmlStr:String = event.result as String;
		ExternalInterface.call("showEntityInformation",htmlStr);
		rpcService.removeEventListener(ResultEvent.RESULT,limitUIHandler);
	}	
	/**
	* Edits Limit 
	* @param strToCreateQueyObject condition string on node
	* @param entityName Entity name.
	*/
	public function editLimit(strToCreateQueyObject:String,entityName:String):void
	{
		
		if(strToCreateQueyObject=="")	
		{
			showValidationMessagesToUser(DAGConstants.EMPTY_LIMIT_ERROR_MESSAGE);
		}
		else
		{
			rpcService.addEventListener(ResultEvent.RESULT,editNodeHandler);
			rpcService.editNode(strToCreateQueyObject,entityName);
		}
							
	}
	/**
	* Edit node handler
	*/
	public function editNodeHandler(event:ResultEvent):void
	{
		var node:DAGNode = event.result as DAGNode;
		if(node!=null)
		{
			if(node.errorMsg=="")
			{
				eNode.toolTip = node.toolTip;
				showValidationMessagesToUser(DAGConstants.EDIT_LIMITS_MESSAGE);
			}
			else
			{
				showValidationMessagesToUser(node.errorMsg);
				node.errorMsg="";
			}
		}
		rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler);
	}
	/**
	*Getting Current Expression
	*/
	public function getExprssionString():String
	{
        var expressionToStringMap:HashMap = new HashMap();
        var expressionsCovered:HashMap = new HashMap();

        for(var i:int = 0; i < totalNodes.length; i++)
        {
        	var dagNode:DAGNode = totalNodes.getItemAt(i)as DAGNode;
        	var exprssIdStr:String	= dagNode.expressionId + "";
            if (null == expressionToStringMap.getValue(exprssIdStr))
            {
                FormExpression(expressionToStringMap, expressionsCovered,dagNode);
            }
        }

        var expressionString:String = "";
	     expressionString =expressionString+"Current Expression:";
        var nonConnectedExpressions:String = "";
        var totalNonConnectedExpressions:int = 0;
        
         for(var i:int = 0; i < totalNodes.length; i++) {
           var dagNode:DAGNode = totalNodes.getItemAt(i)as DAGNode;
           var exprssIdStr:String	= dagNode.expressionId + "";
     
            if (expressionsCovered.containsKey(exprssIdStr) == false) {
                if ((dagNode.displayoutAssociations.length == 0)&&(dagNode.nodeType!=DAGConstants.VIEW_ONLY_NODE))
                 {
                    nonConnectedExpressions += exprssIdStr;
                    nonConnectedExpressions += " ";
                    totalNonConnectedExpressions++;
                } else {
                    expressionString =expressionString +expressionToStringMap.getValue(exprssIdStr);
                }
            }
        }

        if (totalNonConnectedExpressions > 0) {
            expressionString = expressionString+ "Expression " + nonConnectedExpressions;
            if (totalNonConnectedExpressions == 1) {
                expressionString = expressionString +" is not connected";
            } else {
                expressionString = expressionString+" are not connected";
            }
        }

	   return expressionString;
    }
    /**
    * Forming current expression
    */
    private function FormExpression(expressionToStringMap:HashMap,expressionsCovered:HashMap,node:DAGNode):String
    {
        var expressionString:String = "";
       //If node is only in view and does not have constraints, its should not be a part of the expression string
       if(node.nodeType == DAGConstants.VIEW_ONLY_NODE)
		{
       	    expressionToStringMap.put(node.expressionId+"", expressionString);
            return expressionString;
        }
        
         var expressionId:int = node.expressionId;
			
	     if(node.displayoutAssociations.length>0)
		 {   
		 	var assocation:Association = node.displayoutAssociations.getItemAt(0) as Association;
		 	if(assocation.operatorIndex==0)
            {
			 	expressionString=expressionString +" (" + expressionId +" "+"AND"+" ";
            }
            else
            {
            	expressionString=expressionString +" (" + expressionId +" "+"OR"+" ";
         	}

		     if(node.displayoutAssociations.length>1)
			{
                 expressionString=expressionString + " (";
            }

            for (var i:int=0; i <node.displayoutAssociations.length; i++) 
			{
				assocation = node.displayoutAssociations.getItemAt(i) as Association;
				var attachedNode:HashMap =node.attachedNodeMap as HashMap;
				
				var associationNode:DAGNode = attachedNode.getValue(assocation.associatedNode) as DAGNode; 
				
                if (i > 0 && (associationNode.nodeType!=DAGConstants.VIEW_ONLY_NODE)) 
                {
                	if(assocation.operatorIndex==0)
                	{
                     	expressionString=expressionString+" "+"AND"+" ";
	                }
	                else
	                {
                 	 	expressionString=expressionString+" "+"OR"+" ";
	                }
                }

                if (expressionToStringMap.getValue(associationNode.name) != null)
                {
                     expressionString=expressionString+expressionToStringMap.getValue((associationNode.name));
                }
                else
                {
                     expressionString=expressionString +FormExpression(expressionToStringMap, expressionsCovered,associationNode);
                }

                expressionsCovered.put(associationNode.name,associationNode);
            }

	           if(node.displayoutAssociations.length>1)
				{
                expressionString=expressionString +") ";
        	    }

            	  expressionString=expressionString+") ";
        } 
        else
        {
           expressionString=expressionString + expressionId;
		}
        expressionToStringMap.put(node.expressionId+"",expressionString);
   
        return expressionString;
    }
    /**
    * Clear all Paths in DAG
    */
	public function clearPaths():void
	{
		 for(var i:int=0;i<allPaths.length;i++)
		 {
			var key:String = allPaths.getItemAt(i) as String;
			var dagPath:DAGPath = dagPathUIMap.getValue(key) as DAGPath;
			dagPath.deletePath(dagPath.getFromNode(),dagPath.getToNode());
		 }
		 dagPathUIMap.clear();
	}

       public function openTQPopUp():void
       {
		 var dagNode1:DAGNode = DAGNode(mainPanel.getChildByName(node1));
		 var dagNode2:DAGNode = DAGNode(mainPanel.getChildByName(node2));
		 
	     if((dagNode1 != null) && (dagNode2 != null))
	     {
	         rpcService.addEventListener("result",nodeValidityHandler);
		     rpcService.checkIfNodesAreValid(selectedNodeList);
	     }
	     	 
	 }
	
	private function nodeValidityHandler(event : ResultEvent):void
	{
		var areNodesValid : Boolean = event.result as Boolean;
		if(areNodesValid == true)
		{
		     
		     rpcService.removeEventListener(ResultEvent.RESULT,nodeValidityHandler);
		     rpcService.retrieveQueryData(selectedNodeList);
		     rpcService.addEventListener(ResultEvent.RESULT,populateDataHandler);
		}
		else
		{
			Alert.show("Nodes are not valid");
		}
	}
	
	private function splitEntityName(entityName : String) : String
	{
		var str : String = "";
		//splitting the entity name on space 
		var words : Array = entityName.split(" ");
		
		for(var i:int=0; i<words.length; i++)
		{
		   str += words[i] + "\n";	
		}
		
		return str;	
	}
	
	public function createAndPopulate(resultMap :Object, operation : String, currentCustomNode : CustomFormulaNode) : void
	{
		//Alert.show("In create and Populate, custom NOde is:"+currentCustomNode.toString());
		queryDataMap = resultMap;
		
		//rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler);
		rpcService.removeEventListener(ResultEvent.RESULT,populateDataHandler);
	    
	     //Retrieving the first node attribute Map
	     var firstNodeDataObject : Object = queryDataMap["firstDropDown"]; 
	     var firstNodeAttributesList : ArrayCollection = new ArrayCollection();
	     var secondNodeAttributeList : ArrayCollection = new ArrayCollection();
         
         //Iterating over the first node attribute map to get all the arrtibutes which is key in the Map 	    
	     for(var key:String in firstNodeDataObject)
	     {
	     	firstNodeAttributesList.addItem(key);	     	
	     }
	     //Getting all arithmetic operators 
	     var arithmeticOperatorsList : ArrayCollection = queryDataMap["secondDropDown"];	
	     
	     //Retrieving the second node attribute Map
	     var secondNodeDataObject : Object = queryDataMap["thirdDropDown"];
	    
	     //Iterating over the first node attribute map to get all the arrtibutes which is key in the Map 	    
	     for(var key1:String in secondNodeDataObject)
	     {
	     	secondNodeAttributeList.addItem(key1);	     	
	     }
	     
	     var relationalOprsList : ArrayCollection = queryDataMap["fourthDropDown"];
	     var timeIntervalsList : ArrayCollection = queryDataMap["timeIntervals"];
	     var entitiesNameList : ArrayCollection = queryDataMap["entityList"];
	    //Opening the pop up window
	   
	    popUp = PopupWindow(PopUpManager.createPopUp(this, PopupWindow, true));
	   
	    popUp.showCloseButton = true; 
	    
	    if(operation == "create")
	    {
	    	popUp.title ="Define Condition";
	    	if(firstNodeAttributesList.length > 1)
	    	{
	    		popUp.cb1.prompt = "--Select--";
	    	}
	    	if(secondNodeAttributeList.length > 1)
	    	{
	    		popUp.cb3.prompt = "--Select--";
	    	}
        }
	    	    
	    //Setting the values to variables  
	   popUp.myArray1 = firstNodeAttributesList;
	   popUp.myArray2 = arithmeticOperatorsList;
	   popUp.myArray3 = secondNodeAttributeList;
	   popUp.myArray4 = relationalOprsList;
	   popUp.myArray5 = timeIntervalsList;
	   
	   // popUp.myArray5 = doctypes;
	  if(operation == "create")
	  {
	  	 var firstDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node1));
	     var secondDAGNode : DAGNode = DAGNode(mainPanel.getChildByName(node2)); 
	     
	     //Setting the names
	     popUp.firstEntityName = firstDAGNode.nodeName;
	     popUp.secondEntityName = secondDAGNode.nodeName;
	     
	     //Setting the Exp Ids
	     popUp.firstEntityExpId = firstDAGNode.expressionId;
	     popUp.secondEntityExpId = secondDAGNode.expressionId;
	     
	     //Setting the nodeName
	     popUp.nodeName = firstDAGNode.nodeNumber + "_" + secondDAGNode.nodeNumber;
	  }
	  else
	  {
	  	 popUp.firstEntityName = currentCustomNode.getFirstNodeName();
	  	 
	  	 popUp.secondEntityName = currentCustomNode.getSecondNodeName();
	  	
	     popUp.firstEntityExpId =  currentCustomNode.getFirstNodeExpId();
	     popUp.secondEntityExpId = currentCustomNode.getSecondNodeExpId();
	  
	      //Setting the nodeName
	      popUp.nodeName = currentCustomNode.name;
	  }
	   popUp.firstEntityLabel = splitEntityName(entitiesNameList.getItemAt(0) as String);
	   popUp.secondEntityLabel = splitEntityName(entitiesNameList.getItemAt(1) as String ); 
	   
	   popUp.dataProvider = queryDataMap;
	   popUp.firstNodeDp = firstNodeDataObject;
	   popUp.secondNodeDp =  secondNodeDataObject; 
	   //Opening the popup window in center
	   
	   
	  
	   if(operation == "edit" && currentCustomNode != null)
	   {
	   	    popUp.title ="Edit Condition";
	        popUp.buttonLabel = "Edit";
	        popUp.cb1.selectedItem = currentCustomNode.getFirstSelectedAttrName();
	        popUp.cb2.selectedItem = currentCustomNode.getSelectedArithmeticOp();
	        popUp.cb3.selectedItem = currentCustomNode.getSecondSelectedAttrName();
	        popUp.cb4.selectedItem = currentCustomNode.getSelectedLogicalOp();  
	        
	        //If the selected Logical Operators are isNull or IsNotNull
	        if((currentCustomNode.getSelectedLogicalOp() == "Is Null") || (currentCustomNode.getSelectedLogicalOp() == "Is Not Null"))
	        {
	        	//Disable both Time value box and Time Interval Combo box
	        	var existingTextInput : TextInput = popUp.myBox.getChildByName(popUp.txtInput.name) as TextInput;
	        	existingTextInput.enabled = false;
	        	
	        	var existingTimeInterval : ComboBox = popUp.myBox.getChildByName(popUp.cb5.name) as ComboBox;
	        	existingTimeInterval.enabled = false;
	        }
	        else
	        {
	        	//This is the condition when there is both time and time Interval 
	       		 if(currentCustomNode.getTimeInterval() != "null")
	        	 {
	        		popUp.txtInput.text = currentCustomNode.getTimeValue();
	        		popUp.cb5.selectedItem = currentCustomNode.getTimeInterval(); 
	              }
		        else
		        {
		        	//This is the condition when there is DataPicker
		        	
		        	//Removing text Box
	           	 	 var existingTextBox : TextInput = popUp.myBox.getChildByName(popUp.txtInput.name) as TextInput;
	           	   	 if(existingTextBox != null)
	           	   	 {
	           	   	   	popUp.myBox.removeChild(existingTextBox);
	
	           	   	   	 //Remove the Time Value Label
		           	 	var existingValueLabel : Label = popUp.labelHBox.getChildByName(popUp.lb5.name) as Label;
		           	 	if(existingValueLabel != null)
		           	 	{
		           	 	   popUp.labelHBox.removeChild(existingValueLabel);
		           	 	}
	           	      }
	           	      
	           	      //Removing the Time Interval Combo Box
	           	      var existingTimeIntervalCb : ComboBox = popUp.myBox.getChildByName(popUp.cb5.name) as ComboBox;
	           	      if(existingTimeIntervalCb != null)
	           	      {
	           	      	 popUp.myBox.removeChild(existingTimeIntervalCb);
	           	      		
	           	      	 //Removing the existing tome Interval Label
	           	      	var existingIntervalLabel : Label = popUp.labelHBox.getChildByName(popUp.lb6.name) as Label;
	           	       	if(existingIntervalLabel != null)
	           	       	{
	           	       		popUp.labelHBox.removeChild(existingIntervalLabel);	
	           	       	}
	           	      }
	           	      
	           	      //Adding The Date Picker
	           	     var datePicker : DateField =  new DateField();
		           	 datePicker.id = "datePicker";
		           	 datePicker.name = "datePicker";
		           	 datePicker.width = 200;
		           	 datePicker.focusEnabled = true;
		           	 datePicker.formatString = "MM/DD/YYYY";
		             datePicker.showToday = true;
					 datePicker.text = currentCustomNode.getTimeValue();
	                 popUp.myBox.addChild(datePicker);
	                
	                //Adding the Label
	                var pickerLabel : Label = new Label();
	           	 	pickerLabel.name = "datePickerLabel";
	           	 	pickerLabel.text = "Select Date";           	      
	           	 	
	           	 	popUp.labelHBox.addChild(pickerLabel);
		        }
	        }
	   }
	   PopUpManager.centerPopUp(popUp);
	}
	
	private function populateDataHandler(event :  ResultEvent):void 
	{
	     rpcService.removeEventListener(ResultEvent.RESULT,populateDataHandler);
	     createAndPopulate(event.result as Object, "create", null);
	 }           
	
      public function addCustomFromulaNode(node : CustomFormulaNode):void
      {
            var dagNode1:DAGNode = null;
            var dagNode2:DAGNode = null;
            var operation : String = node.getOperation();
            //Alert.show("operation is:"+operation);
            if((operation == "rePaint") || (operation == "rePaintEdit"))
            {
            	var nodeName  : String= node.name;
            	var nodeList : ArrayCollection = repaintDAGNodeMap.getValue(nodeName);
                dagNode1 = nodeList.getItemAt(0) as DAGNode;
                dagNode2 = nodeList.getItemAt(1) as DAGNode;
                customFormulaString = node.getFirstNodeName()+"."+node.getFirstSelectedAttrName() +"\n" + node.getSelectedArithmeticOp() + "\n"+node.getSecondNodeName()+"."+node.getSecondSelectedAttrName() +"\n"+ node.getSelectedLogicalOp()+" " + node.getTimeValue() + " " + node.getTimeInterval();
            }
            else
            {
            	dagNode1 = DAGNode(mainPanel.getChildByName(node1));
            	dagNode2 = DAGNode(mainPanel.getChildByName(node2));
            }
            var customNodeName : String = dagNode1.nodeNumber + "_" + dagNode2.nodeNumber; 
            //Getting if there exists any custom node related to selected nodes
            var existingCustomNode : CustomFormulaNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode;
            if(existingCustomNode != null)
            {
            	mainPanel.removeChild(existingCustomNode);
            } 

            var customFormulaNode : CustomFormulaNode = new CustomFormulaNode();
        	
        	//Setting the operation
        	customFormulaNode.setOperation(operation);
        	customFormulaNode.customFormula = customFormulaString;
        	customFormulaNode.initializeNode(dagNode1.x+dagNode1.width+50,dagNode1.y+dagNode1.height+20,node.name);
            
            //Setting the all possible values for Custom Formula node 
            
            //Setting the selected nodes name
            customFormulaNode.setFirstNodeName(node.getFirstNodeName());
            customFormulaNode.setSecondNodeName(node.getSecondNodeName());
            //Setting the Exps Id's
            customFormulaNode.setFirstNodeExpId(node.getFirstNodeExpId());
            customFormulaNode.setSecondNodeExpId(node.getSecondNodeExpId());
            //Setting the selected attributes name
            customFormulaNode.setFirstSelectedAttrName(node.getFirstSelectedAttrName());
            customFormulaNode.setSecondSelectedAttrName(node.getSecondSelectedAttrName());
            //Setting the selected attribute Id's
            customFormulaNode.setFirstSelectedAttrId(node.getFirstSelectedAttrId());
            customFormulaNode.setSecondSelectedAttrId(node.getSecondSelectedAttrId());
            
            //Setting data types
             customFormulaNode.setFirstSelectedAttrType(node.getFirstSelectedAttrType());
             customFormulaNode.setSecondSelectedAttrType(node.getSecondSelectedAttrType());
             
             //Setting the arithmetic operator
             customFormulaNode.setSelectedArithmeticOp(node.getSelectedArithmeticOp());
             
             //Setting the Logical operator
             customFormulaNode.setSelectedLogicalOp(node.getSelectedLogicalOp()); 
             
             //Setting time and time Intervals
             customFormulaNode.setTimeValue(node.getTimeValue());
             customFormulaNode.setTimeInterval(node.getTimeInterval());
            
            customFormulaNode.addEventListener(MouseEvent.MOUSE_MOVE,doCustomFormulaNodeDrag);
            mainPanel.addChild(customFormulaNode);
            
            drawLines(dagNode1,customFormulaNode.x,customFormulaNode.y,customFormulaNode.name);
            drawLines(dagNode2,customFormulaNode.x,customFormulaNode.y,customFormulaNode.name);
         
            //Removing the pop up
            popUp.removeMe();
      }
      private function drawLines(dagNode : DAGNode,toX : int,toY : int,customNodeName:String):void
      {
      	 var fromX : int= dagNode.x+dagNode.width;
      	 var fromY : int = dagNode.y + (dagNode.height/2);
      	 //Removing the existing line
      	 var existingLine : UIComponent = mainPanel.getChildByName(dagNode.nodeNumber+"_"+customNodeName) as UIComponent;
      	 if(existingLine != null)
      	 {
      	 	mainPanel.removeChild(existingLine);
      	 }
      	 
      	 //Redrawing the line
      	 var line: UIComponent = new UIComponent (); 
      	 line.graphics.lineStyle(2, 0x0000FF, .5)
      	 line.graphics.moveTo(fromX,fromY);
      	 line.graphics.lineTo(toX,toY+25);

         //See the name given to line that is added between customNode and any selected Node   
      	 line.name = dagNode.nodeNumber+ "_"+customNodeName;
      	 line.graphics.endFill();
      	 mainPanel.addChild(line);
      	 
      }
      
      private function doCustomFormulaNodeDrag(event:MouseEvent):void
      {
      	 //Retrieving the node to drag 
      	 var dragInitiator : CustomFormulaNode = CustomFormulaNode(event.currentTarget);
      	 var ds:DragSource = new DragSource();
      	 
      	 var nodeProxy : CustomFormulaNode = new CustomFormulaNode();
      	 nodeProxy.customFormula = dragInitiator.formulaLabel.text;
      	 
      	 var pointOffSet:Point = new Point(dragInitiator.mouseX,dragInitiator.mouseY);
		 ds.addData(pointOffSet,"point");
		 
		 DragManager.doDrag(dragInitiator,ds,event,nodeProxy,0,0);
		 
		 nodeSelected = "customFormulaNode";
      }
      private function customFormulaNodeDragEnter(event:DragEvent) : void
      {
      		DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
      }
      
      private function customFormulaNodeDragDrop() : void
      {
      }
      
      /*
  	       This method is invoked from CustomFormulaNode file to delete the Custom Node on click of delete menu  
  	   */

      public function deleteCustomNode(customNodeName : String ,line1 : String,line2 :String) : void
      {
           //Alert.show("In delete custom node");
           var customNode : CustomFormulaNode = mainPanel.getChildByName(customNodeName) as CustomFormulaNode;
           var line : UIComponent= null; 
           if(customNode != null)
           {
           	  mainPanel.removeChild(customNode);
           }
           
           line = mainPanel.getChildByName(line1)as UIComponent;
           if(line != null)
           {
				mainPanel.removeChild(line);           	
           }
           line = mainPanel.getChildByName(line2)as UIComponent;
           if(line != null)
           {
              	mainPanel.removeChild(line);  
           }
           
          // rpcService.removeCustomFormula();
      }
	/*private function geAssociationHandler(event: ResultEvent)
	{
		var pathList:ArrayCollection = event.result as ArrayCollection;
		if((pathList == null) || (pathList.length==0))
		{
			Alert.show("There exists no association between two nodes");
		}
		else
		{
			Alert.show("Association exists");
		}
	
	}*/



]]>
</mx:Script>
<mx:RemoteObject id="rpcService" destination="cdeService">
</mx:RemoteObject>

<mx:VBox width="100%" height="100%" backgroundColor="#f9e886">
	<mx:Panel backgroundColor="white" id="mainPanel" width="100%" height="100%" layout="absolute" title="Diagrammatic View" fontSize="11">
		<mx:HBox  borderStyle="none" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" width="320" height="39" x="0" y="0">
			<mx:Button label="Add Link" click="drawLine()" fontSize="9"/>
			<mx:Button label="Clear All Paths" click="clearPaths()" fontSize="9"/>
			<mx:Button label="Temporal Query" click="openTQPopUp()" fontSize="9"/> 
		</mx:HBox>
	</mx:Panel>
	<mx:Label id="currentExp" fontFamily="Courier New" fontSize="11" fontWeight="bold"/>
</mx:VBox>		
</mx:Application>

