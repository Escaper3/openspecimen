<?xml version="1.0" encoding="utf-8"?>

<mx:Application  xmlns:mx="http://www.adobe.com/2006/mxml" 
layout="vertical" dragEnter="doDragEnter(event)" dragDrop="onDragDrop(event)" 
xmlns:Components="Components.*" xmlns:display="flash.display.*"
creationComplete="initApp()"  width="100%" height="100%">
<mx:Script>
<![CDATA[
	import mx.containers.HBox;
	import mx.controls.ComboBox;
    import mx.controls.ToolTip;
    import mx.managers.ToolTipManager;
	import mx.containers.VBox;
	import mx.controls.Button;
	import mx.utils.ArrayUtil;
	import mx.controls.DataGrid;
	import mx.containers.Accordion;
	import mx.controls.List;
	import Components.Association;
	import Components.IDAGPath;
	import mx.collections.ArrayCollection;
	import mx.states.SetEventHandler;
	import mx.core.UIComponent;
	import Components.DAGNode;
	import mx.containers.Canvas;
	import mx.core.IUIComponent;
	import mx.controls.Alert;
	import mx.events.DragEvent;
	import mx.core.DragSource;
	import mx.managers.DragManager;
	
	import flash.external.ExternalInterface;
	import mx.controls.Alert;
	import mx.rpc.events.ResultEvent;
	import mx.rpc.remoting.RemoteObject;
	import mx.rpc.events.FaultEvent;
	import flash.net.registerClassAlias;
	import Components.AmbiguityPanel;
	import mx.managers.PopUpManager;
   	import mx.core.IFlexDisplayObject;
   	import mx.containers.ControlBar;
    import mx.controls.Spacer;
    import mx.containers.ControlBar;
	
	public var readyTimer:Timer;
	private var dynamicNodeNum:int = 1;
	private var linkNum:int = 1;
	private var node1:String = "";
	private var node2:String = "";
	
	//------------------------
	private var textData:Object = null;
    private  var panel:AmbiguityPanel; 
    private var title:String  = new String();
    private var selectedNodeList:ArrayCollection = new ArrayCollection();
    private var count:int = 0;
    private var resultStr:String = "failed";
    private var firstNode:String;
    private var secondNode:String;
    private var linkCount:int =0;
    private var path:IDAGPath;
	private var pathStr:String
	private	var isQueryObject:Boolean = false;
	public var isOutputView:Boolean=false;
	public var rpcService: RemoteObject;
	

	
	private function repaintHandler(event: ResultEvent):void
	{
		//Alert.show("Repaint");
		var nodeList:ArrayCollection = event.result  as ArrayCollection;
		var xpos:int =0;
		var ypos:int =0;
		for(var i:int=0;i<nodeList.length;i++)
		{
			var node:DAGNode = nodeList.getItemAt(i) as DAGNode;
			node.x = node.x + (xpos + 50);
			node.y = node.y + (100);
						
			node.name =  node.expressionId+"";
			node.nodeNumber = node.expressionId+"";
			node.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
			node.addEventListener(MouseEvent.CLICK,updateNodeSelection);
			panel1.addChild(node);
			
		}
		for(var i:int=0;i<nodeList.length;i++)
		{

			var sourceNode:DAGNode = nodeList.getItemAt(i) as DAGNode;	
			var associationList:ArrayCollection = sourceNode.associationList;
			var pathList:ArrayCollection  = sourceNode.pathList;
			var operatorList:ArrayCollection = sourceNode.operatorList;

			 for(var j:int=0;j<associationList.length;j++)
			 {
			    var targetNode:DAGNode = associationList.getItemAt(j) as DAGNode;	
				pathStr= pathList.getItemAt(j).toString() as String;
			    var operator:String = operatorList.getItemAt(j) as String;
			    sourceNode.operatorArray[0] = operator;
                sourceNode.enable=false;
				linkNodes(sourceNode.expressionId.toString(),targetNode.expressionId.toString());
			 	
			 }
		}
		
	}
	
	private function initFlexInterfaceHandler(event: ResultEvent):void
	{
		//Alert.show("Intialized .....")
	}
	
	private function initApp():void
	{
		registerClassAlias("edu.wustl.catissuecore.flex.dag.DAGNode", DAGNode);
		rpcService= new RemoteObject();
		rpcService.destination="cdeService";
		//Alert.show(Application.application.parameters.view);
		var view:String = Application.application.parameters.view;
		if (isContainerReady())
			{
				// If the container is ready, register the SWF’s functions.
				setUpCall();
			}
			else
			{
				/* If the container is not ready, set up a Timer to call the
				container at 100ms intervals. Once the container responds that
				is ready, the timer will be stopped. */
				readyTimer = new Timer(100);
				readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				readyTimer.start();
			}

		if(view=="AddLimit")
		{
			Alert.show("is query "+isQueryObjectPresent().toString());
			if(isQueryObjectPresent())
			{
				rpcService.addEventListener("result",repaintHandler);
			 	rpcService.repaintCreateDAG();
			}
			else
			{
			rpcService.initFlexInterface();
			rpcService.addEventListener("result",initFlexInterfaceHandler);
			rpcService.addEventListener("fault", faultHandler);
			}
			
	    
		}
		 else
	 	{
	 		//rpcService.removeEventListener(ResultEvent.RESULT,addNodeToViewHandler,false);
		 	rpcService.addEventListener("result",repaintHandler);
		 	rpcService.repaintCreateDAG();
	    }
	    panel = new  AmbiguityPanel();
	    panel.title="Ambiguity resolver";
	}
	
	public function timerHandler():void
	{
		if (isContainerReady())
		{
			// If the container is ready, register the SWF’s functions.
			setUpCall();
			readyTimer.stop();
		}
	}

	public function setUpCall():void 
	{
		ExternalInterface.addCallback("createNode",createNode);		
		ExternalInterface.addCallback("editLimit",editLimit);	
		ExternalInterface.addCallback("searchResult",searchResult);	
		ExternalInterface.addCallback("addNodeToView",addNodeToView);
		ExternalInterface.addCallback("restoreQueryObject",restoreQueryObject);
	}
	
	//setup the callback function so that HTML can call flex methods
	//Checks wheather HTML page is loaded or not.
	private function isContainerReady():Boolean
	{
		var result:Boolean = ExternalInterface.call("isReady");
		return result;
	}
		
	private function faultHandler (event:FaultEvent):void
	{
		// Deal with event.fault.faultString, etc.
		Alert.show(event.fault.faultString, 'Error');
	}
	
	private function isQueryObjectPresent():Boolean
	{
		var result:Boolean = ExternalInterface.call("isQuery");
		return result;
	}
	
	public function restoreQueryObject():void
	{
	///	isQueryObject=true;
		//rpcService.addEventListener("result",restoreQueryObjectHandler);
	//	rpcService.restoreQueryObject();
	}		
	private function restoreQueryObjectHandler(event: ResultEvent):void 		
	{
		Alert.show("Query restore");
		rpcService.removeEventListener("result",restoreQueryObjectHandler,false);
	}
	public function addNodeToView(nodesStr:String):void
	{
		rpcService.removeEventListener("result",repaintHandler);
		rpcService.addEventListener("result",addNodeToViewHandler);
		rpcService.addNodeToView(nodesStr);
	}	
		
	private function addNodeToViewHandler(event: ResultEvent):void 		
	{
	//	Alert.show("Node Added"+event.result);
		textData = event.result;
		if(textData!=null)
		{
			isOutputView = true;
			this.addNode();
		}
		rpcService.removeEventListener(ResultEvent.RESULT,addNodeToViewHandler,false);
	}
			
	public function searchResult():void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
		rpcService.addEventListener("result",searchResultHandler);
		rpcService.getSearchResult();
	}
	
	private function searchResultHandler(event: ResultEvent):void 
	{
		resultStr =event.result.toString();
		if(resultStr=="SUCCESS")// chnage it to SUCCESS
		{
			ExternalInterface.call("showViewSearchResultsJsp");
		}else
		{
			ExternalInterface.call("showErrorPage");
		}
		
	}
	
	public function createNode(strToCreateQueyObject:String,entityName:String):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,initFlexInterfaceHandler,false);
		rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
		rpcService.addEventListener("result",getNodeResultHandler);
		rpcService.setNode(strToCreateQueyObject,entityName);
		rpcService.getLastNode();
	}
	
	public function linkNodesHandler(event: ResultEvent):void
	{
		if(panel.selectedList!=null)
		{
			linkCount=0;
			var numAssociation:int=panel.selectedList.length
			for(var i:int;i<numAssociation;i++)
			{
				linkCount++;
				path = panel.selectedList.getItemAt(i) as IDAGPath;
				linkNodes(firstNode,secondNode);
			}
			panel.selectedList=null;
		}
		else
		{
				if(panel.pathList.length==1)
				{
					path = panel.pathList.getItemAt(0) as IDAGPath;
					linkNodes(firstNode,secondNode);
				}
				else
				{
					Alert.show("No association selected");
				}
			
		}

	rpcService.removeEventListener(ResultEvent.RESULT,linkNodesHandler,false);
	}

	public function getNodeResultHandler(event: ResultEvent):void
	{
		textData = event.result;
		if(textData!=null)
		{
			this.addNode();
		}
	}
	        
	private function createPopUp():void {
	    PopUpManager.addPopUp(panel,this,true);
	    PopUpManager.centerPopUp(panel);  
	    }
	
	//-----------------
	private function doDrag(event:MouseEvent):void
	{
		var dragInitiator:DAGNode = DAGNode(event.currentTarget);
		var ds:DragSource = new DragSource();
		
		var canvasProxy:DAGNode = new DAGNode();
		canvasProxy.nodeNumber = dragInitiator.nodeNumber;
		canvasProxy.nodeName =dragInitiator.nodeName;
		
		
		var pointOffSet:Point = new Point(dragInitiator.mouseX,dragInitiator.mouseY);
		ds.addData(pointOffSet,"point");
		
		DragManager.doDrag(dragInitiator,ds,event,canvasProxy,0,0);
	}
	
	private function doDragEnter(event:DragEvent):void{
		DragManager.acceptDragDrop(event.currentTarget as IUIComponent)
	}
	
	private function onDragDrop(event:DragEvent):void{
		var dagNode:DAGNode = DAGNode(event.dragInitiator) ;
		var pointOffSet:Point = Point(event.dragSource.dataForFormat("point") );
		
		var pt:Point = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = panel1.globalToContent(pt);
		
		dagNode.x = pt.x;
		dagNode.y = pt.y;
		
		//positioning line
		var ass:Association;
		var inAssociations:ArrayCollection;
		var inAsslength:int;
		var outAssociations:ArrayCollection;
		var outAsslength:int;
		
		//Outgoing associations
		outAssociations = dagNode.outAssociations;
		outAsslength = outAssociations.length;
		for(var i:int=0;i<outAsslength;i++)
		{
			ass = Association(outAssociations.getItemAt(i));
			panel1.removeChild(panel1.getChildByName(ass.associatedLink));
			if(panel1.getChildByName(dagNode.name) == null || panel1.getChildByName(ass.associatedNode) == null)
			{
				Alert.show("Please select two nodes to link");
			}
			else
			{
				DAGNode(panel1.getChildByName(ass.associatedNode)).removeInAssociation(dagNode.name,ass.associatedLink);
				linkNodes(dagNode.name,ass.associatedNode);
			}
		}
		for(var j:int=0;j<outAsslength;)
		{
			outAssociations.removeItemAt(j);
			outAsslength--;
			
		}
		
		//Incoming associations
		inAssociations = dagNode.inAssociations;
		inAsslength = inAssociations.length;
		for(var k:int=0;k<inAsslength;k++)
		{
			ass = Association(inAssociations.getItemAt(k));
			panel1.removeChild(panel1.getChildByName(ass.associatedLink));
			if(panel1.getChildByName(dagNode.name) == null || panel1.getChildByName(ass.associatedNode) == null)
			{
				Alert.show("Please select two nodes to link");
			}
			else
			{
				DAGNode(panel1.getChildByName(ass.associatedNode)).removeOutAssociation(dagNode.name,ass.associatedLink);
				linkNodes(ass.associatedNode,dagNode.name);
			}
			
		}
		for(var l:int=0;l<inAsslength;)
		{
			
			inAssociations.removeItemAt(l);
			inAsslength--;
		}
	}
	

	private function addNode():void
	{
		var newNode:DAGNode = new DAGNode();
		newNode.nodeName = textData.nodeName;
		newNode.nodeNumber = textData.expressionId+"";
		newNode.expressionId=textData.expressionId;
		newNode.name = textData.expressionId+"";

		if(isOutputView)
		{
			newNode.nodeColor =0xff8080;
			newNode.toolTip="";
		}
		else
		{
			newNode.nodeColor =0xFFFFAA;
			newNode.toolTip=textData.toolTip;
		}

		newNode.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
		newNode.addEventListener(MouseEvent.CLICK,updateNodeSelection);
		panel1.addChild(newNode);

	}
	
	private function drawLine():void{
		
		var dagNode1:DAGNode = DAGNode(panel1.getChildByName(node1));
		var dagNode2:DAGNode = DAGNode(panel1.getChildByName(node2));
			
		if(dagNode1 == null || dagNode2 == null)
		{
			Alert.show("Please select two nodes to link");
		}
		else
		{
			if(dagNode1.getOutAssociation(node2) != null)
			{
				Alert.show("An association already exists between selected nodes");
			}
			else
			{
				link(node1,node2);
			}
		}
	}
	
	public function getPathHandler(event: ResultEvent):void
	{
		var dagpath:IDAGPath = new IDAGPath();
		panel.pathList= event.result as ArrayCollection;
	
		if(panel.pathList.length>1)
		{
			createPopUp();
		}
		else
		{
			rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
			rpcService.addEventListener("result",linkNodesHandler);
			rpcService.linkNodes(panel.pathList);
		}
		count=0;

	}
	
	public function link(node1:String,node2:String):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
		rpcService.addEventListener("result",getPathHandler);
		rpcService.getpaths(selectedNodeList);
		firstNode=node1;
		secondNode=node2;
	}

	public function linkNodes(firstNode:String,secondNode:String):void
	{
			var dagNode1:DAGNode = DAGNode(panel1.getChildByName(firstNode));
			var dagNode2:DAGNode = DAGNode(panel1.getChildByName(secondNode));
			var fromX:int = dagNode1.x+dagNode1.width;
			var fromY:int = dagNode1.y+(linkCount*10);
			var toX:int = dagNode2.x;
			var toY:int = dagNode2.y+(linkCount*15);
			var line:Sprite = new Sprite();
			
			var graphics:Graphics = line.graphics;
			graphics.clear();
			graphics.moveTo(fromX,fromY);
			graphics.beginFill(0xFFCC00);
			graphics.lineTo(toX,toY);
			graphics.lineStyle(2,0xFFCC00);
			graphics.drawCircle(toX,toY,3);
			graphics.endFill();
			
		
			var vBox:VBox = dagNode1.getChildByName("Association") as VBox;
			vBox.visible=true;
			
			
			//line.graphics.lineTo(200,200);
			var c:UIComponent = new UIComponent();
			c.id="line"+linkNum++;
			c.name="line"+linkNum++;
			c.addChild(line);
			if(path!=null)			
			{
				c.toolTip=path.name;
			}
			else
			{
				c.toolTip=pathStr;
			}

			panel1.addChild(c);
			//removing selections
			dagNode1.unSelect();
			dagNode2.unSelect();
			dagNode1.addOutAssociation(secondNode,c.name);
			dagNode2.addInAssociation(firstNode,c.name);
			node1="";
			node2="";
			selectedNodeList.removeAll();
		
	}
							
	private function moveLine():void{
		panel1.getChildByName("line").x += 1 
		panel1.getChildByName("line").y += 1 
	}
	
	private function updateNodeSelection(event:MouseEvent):void {
		if(event.ctrlKey)
		{
			var dagNode:DAGNode = DAGNode(panel1.getChildByName(event.currentTarget.name));
			if(dagNode != null)
			{
				if(dagNode.name == node1 )
				{
					dagNode.unSelect();
					node1 = "";
				}
				else if(dagNode.name == node2)
				{
					dagNode.unSelect();
					node2 = "";
				}
				else
				{
					if(node1 == "")
					{
						node1 = event.currentTarget.name;
					}
					else
					{							
						if(node2 == "")
						{
							node2 = event.currentTarget.name;
						}
						else
						{
							DAGNode(panel1.getChildByName(node1)).unSelect();
							node1 = node2;
							node2 = event.currentTarget.name;
						}
					}
					dagNode.select();
							
					if(count<2)
					{
						selectedNodeList.addItem(dagNode);
					}
					count++;
				}
			}
		}
		
	}
			
	private function deleteLink():void
	{
		var dagNode1:DAGNode = DAGNode(panel1.getChildByName(node1));
		var dagNode2:DAGNode = DAGNode(panel1.getChildByName(node2));
		var ass:Association=dagNode1.getOutAssociation(node2);
		if(ass != null)
		{
			panel1.removeChild(panel1.getChildByName(ass.associatedLink));
			dagNode1.removeOutAssociation(node2,ass.associatedLink);
			dagNode2.removeInAssociation(node1,ass.associatedLink);
			dagNode1.unSelect();
			dagNode2.unSelect();
		}
		else
		{
			Alert.show("Selected nodes do not have any association");
		}
	}
			
	public function editNode(node:DAGNode):void
	{
		eNode=node;
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
		rpcService.getLimitUI(node.expressionId);
		rpcService.addEventListener(ResultEvent.RESULT,limitUIHandler);
		
	}
	
	public function limitUIHandler(event:ResultEvent):void
	{
		var htmlStr:String = event.result as String;
		ExternalInterface.call("showEntityInformation",htmlStr);
		rpcService.removeEventListener(ResultEvent.RESULT,limitUIHandler);
	}	
	
	public function editLimit(strToCreateQueyObject:String,entityName:String):void
	{
		rpcService.addEventListener(ResultEvent.RESULT,editNodeHandler);
		rpcService.editNode(strToCreateQueyObject,entityName);
							
	}
	public function editNodeHandler(event:ResultEvent):void
	{
		var tooltip:String = event.result as String;
		eNode.toolTip = tooltip;
		rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler);
		
	}
	
	private var eNode:DAGNode;
]]>
</mx:Script>

	<mx:VBox width="100%" height="100%" backgroundColor="#f9e886">
	<mx:Panel backgroundColor="white" id="panel1" width="100%" height="100%" layout="absolute">
		<mx:HBox  borderStyle="none" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" width="190" height="39" x="0" y="0">
			<mx:Button label="Add Link" click="drawLine()"/>
			<mx:Button label="Delete Link" click="deleteLink()"/>
		</mx:HBox>
	</mx:Panel>
	<mx:Label text="Current Expression"  fontFamily="Courier New" fontSize="11" fontWeight="bold"/>
	</mx:VBox>	
	
</mx:Application>

