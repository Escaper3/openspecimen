<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="700" height="200"
	 showCloseButton="true" close="removeMe();" borderColor="#0000FF" backgroundColor="white" left="0" right="0" borderThicknessLeft="2" borderThicknessRight="2" borderThicknessBottom="2" borderThicknessTop="5">
	 
	 <mx:Script>
	 	<![CDATA[
	 		import mx.formatters.DateFormatter;
	 		import mx.controls.DateField;
	 		import mx.controls.DateChooser
	 		import mx.collections.ArrayCollection;
	 		import mx.controls.TextInput;
            import mx.managers.PopUpManager;
            import mx.controls.Alert;
            import mx.core.ClassFactory;
            import mx.controls.List;  
            import Components.DAGNode;
            import Components.CustomFormulaNode;  
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
           [Bindable]
           public var myArray1 : ArrayCollection; 
           
           [Bindable]
	 	   public var myArray2 : ArrayCollection;
	 	   
	 	   [Bindable]
	 		public var myArray3 : ArrayCollection;
	 		
	 		[Bindable]
	 		public var myArray4 : ArrayCollection;
	 		
	 		[Bindable]
	 		public var myArray5:ArrayCollection;
	 		
	 		[Bindable]
	 	    public var dataProvider : Object;
	 	    
	 	    [Bindable]
	 	    public var firstNodeDp : Object;
	 	    
	 	    [Bindable]
	 	    public var secondNodeDp : Object;
	 	    
	 	   	[Bindable]
     		private var myDropdownFactory:ClassFactory;
     		
     		[Bindable]
     		public var firstEntityName : String = null;
     		
     		[Bindable]
     		public var secondEntityName : String = null;
     		
     		[Bindable]
     		 public  var firstEntityExpId : int = 0;
     		 
     		[Bindable]
     		public var secondEntityExpId : int = 0;
     		
     		[Bindable]
     		public var nodeName : String = null;
     	
     		
     		//Declaring all Headers varibles
     		[Bindable] 
	 	    public var firstEntityLabel : String = null;
	 	    
	 	    [Bindable] 
	 	    public var secondEntityLabel : String = null;
	 	    
	 	    [Bindable]
	 	    private var arithmeticLabel : String = "Arithmetic" + "\n" +"Operators"; 
	 	    
	 	    [Bindable]
	 	    private var relationalLabel : String  = "Relational" + "\n" + "Operators";
	 	    
	 	    [Bindable]
	 	    private var timeValueLabel : String = "Time" + "\n" + "Value";
	 	    
	 	    [Bindable]
	 	    private var timeIntrvalLabel : String = "Time" + "\n" + "Interval" ;
	 	    
	 	    [Bindable]
	 	    public var buttonLabel : String = "OK";
	 	     
	 	    private var existingTextBox : TextInput = null;
	 	    
	 	    private var existingDatePicker : DateField = null;
	 	    
	 	    private var  arithmeticOperand : String = null;
	 	    
	 	    private var existingTimeIntervalCb : ComboBox = null;
	 	    private var existingValueLabel : Label = null;
	 	    private var existingIntervalLabel : Label = null; 
	 	    private var valueLabel : Label = null;
	 	    private var intervalLabel : Label = null;
	 	    private var firstNodeList : ArrayCollection= null;
	 	    private var secondNodeList : ArrayCollection = null; 
	 	    private var existingPickerLabel : Label = null; 
	 	    
	 	   public function removeMe():void 
	 	   {
                PopUpManager.removePopUp(this);
           }
           
           private function submitData():void
           {
		  	  var timeValue : String = null;
           	  var timeIntervalValue : String =  null;
           	  var customFormulaString : String = null;
           	  var customFormulaNode : CustomFormulaNode = new CustomFormulaNode();
           	  
           	  //Here based on the last control, the we get the selected value and pass as parameter
           	  existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           	  
           	  if(existingTextBox == null)
           	  {
           	  	  //means there exists the datePicker
           	  	  existingDatePicker = myBox.getChildByName("datePicker") as DateField;
           	 	  if((existingDatePicker != null) && (existingDatePicker.enabled == true ))
           	 	  {
           	 	    var month : String = (existingDatePicker.selectedDate.getMonth()+1).toString();
           	 	    if(month.length == 1)
           	 	    {
           	 	    	month = "0"+month;
           	 	    }
           	 	    var day : String = existingDatePicker.selectedDate.getDate().toString();
           	 	    if(day.length == 1)
           	 	    {
           	 	    	day = "0"+day;
           	 	    }
           	 	    timeValue = month + "/" + day +"/" + existingDatePicker.selectedDate.getFullYear();
           	 	    customFormulaNode.setTimeValue(timeValue);
           	 	    customFormulaNode.setTimeInterval("null");
           	 	  }
           	 	  else
           	 	  {
           	 	  	  customFormulaNode.setTimeValue("null");
           	 	  	  customFormulaNode.setTimeInterval("null");
           	 	  } 	
           	  }
           	  else
           	  {
           	  	   //Get the value of  text box and value of dropdown
           	  	   existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
           	  	   if((existingTextBox.enabled == true) && (existingTimeIntervalCb != null) && (existingTimeIntervalCb.enabled == true))
           	  	   {
					    timeValue = existingTextBox.text;
					    customFormulaNode.setTimeValue(timeValue);
           	  	   		timeIntervalValue = existingTimeIntervalCb.selectedItem.toString();
           	  	   		customFormulaNode.setTimeInterval(timeIntervalValue);
           	  	   }
           	  	   else
           	  	   {
           	  	   	  customFormulaNode.setTimeValue("null");
           	  	   	  customFormulaNode.setTimeInterval("null");
           	  	   }
           	  }
           	  
           	//Getting the left and right operands
		 	 customFormulaNode.setFirstSelectedAttrName(cb1.selectedItem.toString());
             customFormulaNode.setSecondSelectedAttrName(cb3.selectedItem.toString());           	
           	
           	//Getting left and right entities property list containing <attributeId , attributeTyep>
           	 firstNodeList = firstNodeDp[cb1.selectedItem.toString()];
           	 secondNodeList = secondNodeDp[cb3.selectedItem.toString()];	
           	 customFormulaNode.setFirstSelectedAttrType(String(firstNodeList.getItemAt(1)));
           	 customFormulaNode.setSecondSelectedAttrType(String(secondNodeList.getItemAt(1)));	    
           	 //Getting Id's of Attributes
           	 customFormulaNode.setFirstSelectedAttrId(String(firstNodeList.getItemAt(0)));
             customFormulaNode.setSecondSelectedAttrId(String(secondNodeList.getItemAt(0))); 
            
            //Setting the selected Arithmetic Operator
            customFormulaNode.setSelectedArithmeticOp(cb2.selectedItem.toString());
             
            //Setting theselected logical operator
            customFormulaNode.setSelectedLogicalOp(cb4.selectedItem.toString());  
             
             if(timeIntervalValue != null)
             {
             	customFormulaString = firstEntityName+"."+cb1.selectedItem + "\n "+ cb2.selectedItem + " \n" +secondEntityName+"."+cb3.selectedItem + "\n" + cb4.selectedItem + " " + timeValue + " " +  timeIntervalValue;
             } 
             else
             {
              	customFormulaString =  firstEntityName+"."+cb1.selectedItem+ " \n"+ cb2.selectedItem + "\n " + secondEntityName+"."+cb3.selectedItem  + "\n" + cb4.selectedItem + " " + timeValue ;
             }
             
             //Setting the first selected DAG Nodes Properties
             customFormulaNode.setFirstNodeName(firstEntityName); 
             customFormulaNode.setFirstNodeExpId(firstEntityExpId); 
              
            //Setting the second selected DAG Nodes Properties
            customFormulaNode.setSecondNodeName(secondEntityName);
            customFormulaNode.setSecondNodeExpId(secondEntityExpId);
            
            customFormulaNode.name = nodeName;
            
            //Setting custom column Name
            customFormulaNode.setCustomColumnName(customColumnName.text);
            parentApplication.customFormulaString = customFormulaString;
             
            this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);

            if(submitButton.label == "OK")
            {
             	//rpcService.formTemporalQuery(customFormulaNode, "add");
              this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editCustomNodeHandler);
              this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, resultHandler);
              customFormulaNode.setOperation("create");
              this.parentApplication.rpcService.formTemporalQuery(customFormulaNode, "add");
            }
            else
            {
                 this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,resultHandler);
                 this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, editCustomNodeHandler);
                 customFormulaNode.setOperation("edit");
                 this.parentApplication.rpcService.formTemporalQuery(customFormulaNode, "edit");	
            }
                         	   
       } 
       
       private function editCustomNodeHandler(event : ResultEvent) : void
       {
       	  var node  : CustomFormulaNode = event.result as CustomFormulaNode;
       	  this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,resultHandler);
          this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editCustomNodeHandler);
          parentApplication.addCustomFromulaNode(node);
       } 

	   public function  resultHandler(event : ResultEvent):void
       {
           var node  : CustomFormulaNode = event.result as CustomFormulaNode;
           this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, resultHandler);
           parentApplication.addCustomFromulaNode(node);
       }  
      private function faultHandler (event:FaultEvent):void
	  {
		  Alert.show(event.fault.faultString, 'Error');
	  }
	  
           private function addInputControl() : void
           {
           	  			//IN case of subtraction of two dates, it should be something integer 
           	 	        existingDatePicker = myBox.getChildByName("datePicker") as DateField;
           	 	        if(existingDatePicker != null)
           	 	        {
           	 	        	myBox.removeChild(existingDatePicker);
           	 	        }
           	 	        
           	 	        //Removing existing date Picker Label 
           	 	        existingPickerLabel = labelHBox.getChildByName("datePickerLabel") as Label;
           	 	        if(existingPickerLabel != null)
           	 	        {
           	 	        	labelHBox.removeChild(existingPickerLabel);
           	 	        }

           	 	        existingValueLabel = labelHBox.getChildByName("label5") as Label;
           	 	        if(existingValueLabel == null)
           	 	        {
           	 	        	//Add New label
           	 	        	valueLabel = new Label();
           	 	        	valueLabel.id = "lb5";
           	 	        	valueLabel.name = "label5";
           	 	        	valueLabel.text = "Time Value";
           	 	        	valueLabel.width = 100;
           	 	        	valueLabel.buttonMode = true;
           	 	        	labelHBox.addChild(valueLabel);
           	 	        }
           	 	        existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	 	        if(existingIntervalLabel == null)
           	 	        {
           	 	        	intervalLabel = new Label();
           	 	        	intervalLabel.id = "lb6";
           	 	        	intervalLabel.name ="label6";
           	 	        	intervalLabel.text = "Time Interval";
           	 	        	intervalLabel.width = 100;
           	 	            intervalLabel.buttonMode = true;
           	 	            
           	 	            labelHBox.addChild(intervalLabel);
           	 	        }
           	 	        
           	 	        existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           	 	        if(existingTextBox == null)
           	 	        {
           	 	        	//If no text input exists, create text input
           	 	        	var textBox : TextInput = new TextInput();
           	   				textBox.id = "txtInput";
           	   				textBox.name = "txtInput"
						    textBox.width = 100;
           	   				myBox.addChild(textBox);
           	 	        }
           	 	        existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
                       if(existingTimeIntervalCb == null)
                       {
                       	   var comboBox : ComboBox = new ComboBox();
                       	   comboBox.id = "cb5";
                       	   comboBox.name = "timeIntervalCb";
                       	   comboBox.width = 100;
                           comboBox.dropdownFactory = myDropdownFactory;
                       	   comboBox.dataProvider = myArray5;
                       	   myBox.addChild(comboBox);
                       	   
                       }
           	
           } 
           
            private function initClassFactory():void
			{
				/**
				  Creating the Drop down factory
				*/
						
				myDropdownFactory = new ClassFactory(List);
				myDropdownFactory.properties = {showDataTips:true, dataTipFunction:myDataTipFunction};
			}
           
           private function myDataTipFunction(item:Object):String
           { 
           	    return String(item);
           }
           private function validateQueryData():void
           {
           	  	var firstOperandType : String  = null; 
           	  	var secondOperandType : String = null;
		 		var firstOperand : String = cb1.selectedItem.toString();
		 		var secondOperand : String = cb3.selectedItem.toString();
         
			 	var firstNodeAttributeId : String = null;
			 	var secondNodeAttributeId :String = null;
			 	if(firstOperand != null && secondOperand != null)
    	     	{
           	 		firstNodeList = firstNodeDp[firstOperand];
           	 		secondNodeList = secondNodeDp[secondOperand];
           	 	
           	 		firstOperandType = String(firstNodeList.getItemAt(1));
           	 	 	secondOperandType= String(secondNodeList.getItemAt(1));
           	 	    
           	 	    if((firstOperandType == "Date") && (secondOperandType == "Date"))
           	 	    {
           	 			arithmeticOperand= cb2.selectedItem.toString();
           	 	    	if((arithmeticOperand == "+") || (arithmeticOperand == "/") || (arithmeticOperand == "*"))
           	 	    	{
           	 	    		Alert.show("Not a valid operation. Change the Operator");
           	 	    	}
           	 	    	else
           	 	    	{
           	 	    	  	addInputControl();         	 	    
           	 	    	}
           	 		}
           	 		else if((firstOperandType == "Integer") && (secondOperandType == "Integer"))
           	 		{
           	 			//IN case of subtraction of two dates, it should be something integer 
           	 	    	addInputControl();
           	 		}
           	 		else if(firstOperandType.match("Integer") && secondOperandType.match("Date") && (cb2.selectedItem.toString()=="-"))
           	 		{
           	 			Alert.show("Not a valid Operand. Second Operand should be DateOffset");
           	 		}
           	 		else
           	 		{
           	 	    
           	 	    	//here any of the operand is Date and another is Integer, we should use DatePicker
           	 	    	arithmeticOperand= cb2.selectedItem.toString();
           	 	   	 	if((arithmeticOperand == "/") || (arithmeticOperand == "*") )
           	 	    	{
           	 	    		Alert.show("Operation is not valid. Change Operator");
           	 	    	}
           	 	    	else
           	 	    	{
           	 	    		//Removing text Box
           	 	    		existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           	   				var value : String =  null;
           	   				if(existingTextBox != null)
           	   				{
           	   	 	    		value = existingTextBox.text;
           	   	   				myBox.removeChild(existingTextBox);
           	   	   				
           	   	   				//Remove the Time Value Label
	           	 	        	existingValueLabel = labelHBox.getChildByName("label5") as Label;
	           	 	        	if(existingValueLabel != null)
	           	 	        	{
	           	 	        		labelHBox.removeChild(existingValueLabel);
	           	 	        	}
           	        		}
           	        	
           	        		//Removing time interval ComboBox
           	        		existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
           	       			if(existingTimeIntervalCb != null)
           	       			{
           	       				myBox.removeChild(existingTimeIntervalCb);
           	       				
           	       				//Remove the Time Interval Label
           	       				existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	       				if(existingIntervalLabel != null)
           	       				{
           	       				   labelHBox.removeChild(existingIntervalLabel);	
           	       				}
           	       			}
           	       		
           	       			//Creating the DatePicker
           	       			existingDatePicker= myBox.getChildByName("datePicker") as DateField;
           	 	        	if(existingDatePicker == null)
           	 	        	{
           	 	        		var datePicker : DateField =  new DateField();
	           	       			datePicker.id = "datePicker";
	           	       			datePicker.name = "datePicker";
	           	       			datePicker.width = 200;
	           	       			datePicker.focusEnabled = true;
	           	       			datePicker.formatString = "MM/DD/YYYY";
	           	            	datePicker.showToday = true;
	           	              
	           	       			//Adding datePicket as childs
	           	 	   			myBox.addChild(datePicker); 
	           	 	     	}
	           	 	     	//Creating the DatePicker Label
	           	 	     	existingPickerLabel = labelHBox.getChildByName("datePickerLabel") as Label;
           	 	    	   if(existingPickerLabel == null)
           	 	    	   {
           	 	    	   	  var pickerLabel : Label = new Label();
           	 	    	   	  pickerLabel.name = "datePickerLabel";
           	 	    	   	  pickerLabel.text = "Select Date";
           	 	    	   	  
           	 	    	   	  labelHBox.addChild(pickerLabel);
           	 	    	   }
           	 	    	}
           	 		}
        	  	}
	          	else
    	      	{
        	   	 	Alert.show("Please select the left Operand");
           	  	}
           	} 
           	
           	/*
                This method will enable/Disable the right hand side controls based on the relational operator selected
            */
           	private function righthandSideHandler():void
           	{ 
           		
           		//get the value text box and time Interval picker and datePicker
           		existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           		existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
           		existingDatePicker= myBox.getChildByName("datePicker") as DateField;
           		
           		//If relational operator is "S NUll" or "Is Not Null", then deactivate the right hand side controls else activate them   
           		if((cb4.selectedItem.toString()=="Is Null") || (cb4.selectedItem.toString()=="Is Not Null"))
           		{
           			if((existingTextBox != null) && (existingTimeIntervalCb != null))
           			{
           				//deactivate both of them
           				existingTextBox.enabled = false;
           				existingTimeIntervalCb.enabled = false;
           			}
           			else
           			{
           				//It's going to be datePicker, so disable date picker
           			   	 if(existingDatePicker != null)
           			   	 {
           			   	 	existingDatePicker.enabled = false;
           			   	 }
           			}
           		}
           		else
           		{
           			//Activate controls if they are disabled 
           			if((existingTextBox != null) && (existingTimeIntervalCb != null))
           			{
           				if((existingTextBox.enabled== false) && (existingTimeIntervalCb.enabled == false))
           				{
           					existingTextBox.enabled = true;
           					existingTimeIntervalCb.enabled =  true; 
           				}
           			}
           			else
           			{
           				if((existingDatePicker != null) && (existingDatePicker.enabled == false))
           				{
           					existingDatePicker.enabled =  true;
           				}
           			}
           		}
            }
	 	]]>
	 </mx:Script>
      
   <mx:RemoteObject id="rpcService" destination="cdeService"></mx:RemoteObject>
     <mx:VBox x="20" y="20">
      <mx:HBox x="20" y="20" id="labelHBox">
        <mx:Label id="lb1" name="label1" width="100"  height="50" color="blue" text="{firstEntityLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true" />
      	<mx:Label id="lb2" name="label2" width="100"  height="50" color="blue" text="{arithmeticLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true"/>
      	<mx:Label id="lb3" name="label3" width="100"  height="50" color="blue" text="{secondEntityLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true"/>
      	<mx:Label id="lb4" name="label4" width="100"  height="50" color="blue"  text="{relationalLabel}" fontStyle="normal" fontWeight="bold"/>
      	<mx:Label id="lb5" name="label5" width="100"  height="50" color="blue" text="{timeValueLabel}" fontStyle="normal" fontWeight="bold"/>
      	<mx:Label id="lb6" name="label6" width="100"  height="50" color="blue" text="{timeIntrvalLabel}" fontStyle="normal" fontWeight="bold"/>
      	
      </mx:HBox>
      
      <mx:HBox id ="myBox" x="20" y="60">
      	
      	<mx:ComboBox id="cb1" dataProvider="{myArray1}" width="100"   borderThickness="0" borderColor="blue"  dropdownFactory="{myDropdownFactory}" creationComplete="initClassFactory()" change="validateQueryData()"/>
      	<mx:ComboBox id="cb2" dataProvider="{myArray2}" width="100"   borderThickness="0" borderColor="blue"  textAlign="center" prompt="--Select--" change="validateQueryData()"/>
      	<mx:ComboBox id="cb3" dataProvider="{myArray3}" width="100"   borderThickness="0" borderColor="blue" change="validateQueryData()"  dropdownFactory="{myDropdownFactory}" creationComplete="initClassFactory()" />
      	<mx:ComboBox id="cb4" dataProvider="{myArray4}" width="100"   borderThickness="0" borderColor="blue"  prompt="--Select--" dropdownFactory="{myDropdownFactory}" creationComplete="initClassFactory()" change="righthandSideHandler()"/>
        <mx:TextInput id="txtInput" name="txtInput"  width="100" restrict="0-9" borderColor="blue" /> 
        <mx:ComboBox id="cb5" name="timeIntervalCb" dataProvider="{myArray5}" width="100"  borderThickness="0" borderColor="blue" prompt="--Select--" dropdownFactory="{myDropdownFactory}" creationComplete="initClassFactory()"/>
       <!-- <mx:Panel  id="p1" height="20" width="100" /> -->
      </mx:HBox> 	 
	 <mx:HBox x="20">
         <mx:Label id="columnLabel" width="330" text="Please Enter Column Name To Be Displayed in Results:"/>
         <mx:TextInput id="customColumnName" width="300" restrict="A-Z a-z" borderColor="blue"/>
	 </mx:HBox>
	  
	  <mx:HBox x="20" y="50">
	      <mx:Button id="submitButton" label="{buttonLabel}" click="submitData();"/>
          <mx:Button id="cancelButton" label="Cancel" click="removeMe();"/>  
	  </mx:HBox>
	  
	  </mx:VBox>

</mx:TitleWindow>
