<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="700" height="240"
	 showCloseButton="true" close="removeMe();" borderColor="#0000FF" backgroundColor="white" 
	 left="0" right="0" borderThicknessLeft="2" borderThicknessRight="2" borderThicknessBottom="2" 
	 borderThicknessTop="5" creationComplete="removeComponent()">
	 <mx:Script>
	 	<![CDATA[
	 		import mx.events.ValidationResultEvent;
	 		import mx.formatters.DateFormatter;
	 		import mx.controls.DateField;
	 		import mx.controls.DateChooser
	 		import mx.collections.ArrayCollection;
	 		import mx.controls.TextInput;
            import mx.managers.PopUpManager;
            import mx.controls.Alert;
            import mx.core.ClassFactory;
            import mx.controls.List;  
            import Components.DAGNode;
            import Components.CustomFormulaNode;  
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
           [Bindable]
           public var myArray1 : ArrayCollection; 
           
           [Bindable]
	 	   public var myArray2 : ArrayCollection;
	 	   
	 	   [Bindable]
	 		public var myArray3 : ArrayCollection;
	 		
	 		[Bindable]
	 		public var myArray4 : ArrayCollection;
	 		
	 		[Bindable]
	 		public var myArray5:ArrayCollection;
	 		
	 		[Bindable]
	 	    public var dataProvider : Object;
	 	    
	 	    [Bindable]
	 	    public var firstNodeDp : Object;
	 	    
	 	    [Bindable]
	 	    public var secondNodeDp : Object;
	 	    
	 	   	[Bindable]
     		private var myDropdownFactory:ClassFactory;
     		
     		[Bindable]
     		public var firstEntityName : String = null;
     		
     		[Bindable]
     		public var secondEntityName : String = null;
     		
     		[Bindable]
     		 public  var firstEntityExpId : int = 0;
     		 
     		[Bindable]
     		public var secondEntityExpId : int = 0;
     		
     		[Bindable]
     		public var nodeName : String = null;
     	
     		
     		//Declaring all Headers varibles
     		[Bindable] 
	 	    public var firstEntityLabel : String = null;
	 	    
	 	    [Bindable] 
	 	    public var secondEntityLabel : String = null;
	 	    
	 	    [Bindable]
	 	    private var arithmeticLabel : String = "Arithmetic" + "\n" +"Operators"; 
	 	    
	 	    [Bindable]
	 	    private var relationalLabel : String  = "Relational" + "\n" + "Operators";
	 	    
	 	    [Bindable]
	 	    private var timeValueLabel : String = "Time" + "\n" + "Value";
	 	    
	 	    [Bindable]
	 	    private var timeIntrvalLabel : String = "Time" + "\n" + "Interval" ;
	 	    
	 	    [Bindable]
	 	    public var buttonLabel : String = "OK";
	 	     
	 	    private var existingTextBox : TextInput = null;
	 	    
	 	    private var existingDatePicker : DateField = null;
	 	    
	 	    private var  arithmeticOperand : String = null;
	 	    
	 	    private var existingTimeIntervalCb : ComboBox = null;
	 	    private var existingValueLabel : Label = null;
	 	    private var existingIntervalLabel : Label = null; 
	 	    private var valueLabel : Label = null;
	 	    private var intervalLabel : Label = null;
	 	    private var firstNodeList : ArrayCollection= null;
	 	    private var secondNodeList : ArrayCollection = null; 
	 	    private var existingPickerLabel : Label = null; 
	 	    
	 	   public function removeMe():void 
	 	   {
                PopUpManager.removePopUp(this);
           }
           
           private function submitData():void
           {
           	  var flag:Boolean = validate();
           	  if(flag == false) 
           	  	 return;
           	  	   
		  	  var timeValue : String = null;
           	  var timeIntervalValue : String =  null;
           	  var customFormulaString : String = null;
           	  var customFormulaNode : CustomFormulaNode = new CustomFormulaNode();
           	  
           	  //Here based on the last control, the we get the selected value and pass as parameter
           	  existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           	  
           	  if(existingTextBox == null)
           	  {
           	  	  //means there exists the datePicker
           	  	  existingDatePicker = myBox.getChildByName("datePicker") as DateField;
           	 	  if((existingDatePicker != null) && (existingDatePicker.enabled == true ))
           	 	  {
           	 	    var month : String = (existingDatePicker.selectedDate.getMonth()+1).toString();
           	 	    if(month.length == 1)
           	 	    {
           	 	    	month = "0"+month;
           	 	    }
           	 	    var day : String = existingDatePicker.selectedDate.getDate().toString();
           	 	    if(day.length == 1)
           	 	    {
           	 	    	day = "0"+day;
           	 	    }
           	 	    timeValue = month + "/" + day +"/" + existingDatePicker.selectedDate.getFullYear();
           	 	    customFormulaNode.setTimeValue(timeValue);
           	 	    customFormulaNode.setTimeInterval("null");
           	 	  }
           	 	  else
           	 	  {
           	 	  	  customFormulaNode.setTimeValue("null");
           	 	  	  customFormulaNode.setTimeInterval("null");
           	 	  } 	
           	  }
           	  else
           	  {
           	  	 if(this.parentApplication.view == "Result"){
           	  	   customFormulaNode.setTimeValue("null");
           	  	   customFormulaNode.setTimeInterval(cb6.selectedItem.toString());
           	  	 }else{
           	  	   //Get the value of  text box and value of dropdown
           	  	   existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
           	  	   if((existingTextBox.enabled == true) && (existingTimeIntervalCb != null) && (existingTimeIntervalCb.enabled == true))
           	  	   {
					    timeValue = existingTextBox.text;
					    customFormulaNode.setTimeValue(timeValue);
           	  	   		timeIntervalValue = existingTimeIntervalCb.selectedItem.toString();
           	  	   		customFormulaNode.setTimeInterval(timeIntervalValue);
           	  	   }
           	  	   else
           	  	   {
           	  	   	  customFormulaNode.setTimeValue("null");
           	  	   	  customFormulaNode.setTimeInterval("null");
           	  	   }
           	  	 }
           	  }
           	  
           	//Getting the left and right operands
		 	 customFormulaNode.setFirstSelectedAttrName(cb1.selectedItem.toString());
             customFormulaNode.setSecondSelectedAttrName(cb3.selectedItem.toString());           	
           	
           	//Getting left and right entities property list containing <attributeId , attributeTyep>
           	 firstNodeList = firstNodeDp[cb1.selectedItem.toString()];
           	 secondNodeList = secondNodeDp[cb3.selectedItem.toString()];	
           	 customFormulaNode.setFirstSelectedAttrType(String(firstNodeList.getItemAt(1)));
           	 customFormulaNode.setSecondSelectedAttrType(String(secondNodeList.getItemAt(1)));	    
           	 //Getting Id's of Attributes
           	 customFormulaNode.setFirstSelectedAttrId(String(firstNodeList.getItemAt(0)));
             customFormulaNode.setSecondSelectedAttrId(String(secondNodeList.getItemAt(0))); 
            
            //Setting the selected Arithmetic Operator
            customFormulaNode.setSelectedArithmeticOp(cb2.selectedItem.toString());
            
            trace("this.parentApplication.view" + this.parentApplication.view);
            
            //Setting the first selected DAG Nodes Properties
	            customFormulaNode.setFirstNodeName(firstEntityName); 
	            customFormulaNode.setFirstNodeExpId(firstEntityExpId); 
	              
	            //Setting the second selected DAG Nodes Properties
	            customFormulaNode.setSecondNodeName(secondEntityName);
	            customFormulaNode.setSecondNodeExpId(secondEntityExpId);
	            
	            customFormulaNode.name = nodeName;
            if(this.parentApplication.view == "Result"){
            	customFormulaNode.setSelectedLogicalOp("null");
             	customFormulaString = firstEntityName+"."+cb1.selectedItem + "\n "+ cb2.selectedItem + " \n" +secondEntityName+"."+cb3.selectedItem;
            }else{ 
	            //Setting theselected logical operator
	            customFormulaNode.setSelectedLogicalOp(cb4.selectedItem.toString());  
	             
	            if(timeIntervalValue != null){
	             	customFormulaString = firstEntityName+"."+cb1.selectedItem + "\n "+ cb2.selectedItem + " \n" +secondEntityName+"."+cb3.selectedItem + "\n" + cb4.selectedItem + " " + timeValue + " " +  timeIntervalValue;
	            }else{
	              	customFormulaString =  firstEntityName+"."+cb1.selectedItem+ " \n"+ cb2.selectedItem + "\n " + secondEntityName+"."+cb3.selectedItem  + "\n" + cb4.selectedItem + " " + timeValue ;
	            }     
            }
            
            //Setting custom column Name      
	        customFormulaNode.setCustomColumnName(customColumnName.text);
	        
            parentApplication.customFormulaString = customFormulaString;
             
            this.parentApplication.rpcService.addEventListener(FaultEvent.FAULT, faultHandler);

            if(submitButton.label == "OK")
            {
              trace("customFormulaNode :" + customFormulaNode);	 
              this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editCustomNodeHandler);
              this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, resultHandler);
              customFormulaNode.setOperation("create");
              this.parentApplication.rpcService.formTemporalQuery(customFormulaNode, "add");
            }
            else
            {
                 this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,resultHandler);
                 this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT, editCustomNodeHandler);
                 customFormulaNode.setOperation("edit");
                 this.parentApplication.rpcService.formTemporalQuery(customFormulaNode, "edit");	
            }
                         	   
       } 
       
       private function editCustomNodeHandler(event : ResultEvent) : void
       {
       	  var node  : CustomFormulaNode = event.result as CustomFormulaNode;
       	  this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,resultHandler);
          this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,editCustomNodeHandler);
          parentApplication.addCustomFromulaNode(node);
       } 

	   public function  resultHandler(event : ResultEvent):void
       {
           var node  : CustomFormulaNode = event.result as CustomFormulaNode;
           this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT, resultHandler);
           parentApplication.addCustomFromulaNode(node);
       }  
      private function faultHandler (event:FaultEvent):void
	  {
		  Alert.show(event.fault.faultString, 'Error');
	  }
	  
           private function addInputControl() : void
           {
           	  			//IN case of subtraction of two dates, it should be something integer 
           	 	        existingDatePicker = myBox.getChildByName("datePicker") as DateField;
           	 	        if(existingDatePicker != null)
           	 	        {
           	 	        	myBox.removeChild(existingDatePicker);
           	 	        }
           	 	        
           	 	        //Removing existing date Picker Label 
           	 	        existingPickerLabel = labelHBox.getChildByName("datePickerLabel") as Label;
           	 	        if(existingPickerLabel != null)
           	 	        {
           	 	        	labelHBox.removeChild(existingPickerLabel);
           	 	        }

           	 	        existingValueLabel = labelHBox.getChildByName("label5") as Label;
           	 	        if(existingValueLabel == null)
           	 	        {
           	 	        	//Add New label
           	 	        	valueLabel = new Label();
           	 	        	valueLabel.id = "lb5";
           	 	        	valueLabel.name = "label5";
           	 	        	valueLabel.text = "Time Value";
           	 	        	valueLabel.width = 100;
           	 	        	valueLabel.buttonMode = true;
           	 	        	labelHBox.addChild(valueLabel);
           	 	        }
           	 	        existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
           	 	        if(existingIntervalLabel == null)
           	 	        {
           	 	        	intervalLabel = new Label();
           	 	        	intervalLabel.id = "lb6";
           	 	        	intervalLabel.name ="label6";
           	 	        	intervalLabel.text = "Time Interval";
           	 	        	intervalLabel.width = 100;
           	 	            intervalLabel.buttonMode = true;           	 	            
           	 	            labelHBox.addChild(intervalLabel);
           	 	        }
           	 	        
           	 	        existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           	 	        if(existingTextBox == null)
           	 	        {
           	 	        	//If no text input exists, create text input
           	 	        	var textBox : TextInput = new TextInput();
           	   				textBox.id = "txtInput";
           	   				textBox.name = "txtInput"
						    textBox.width = 100;
           	   				myBox.addChild(textBox);
           	 	        }
           	 	        existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox;   
                       if(existingTimeIntervalCb == null)
                       {
                       	   var comboBox : ComboBox = new ComboBox();
                       	   comboBox.id = "cb5";
                       	   comboBox.name = "timeIntervalCb";
                       	   comboBox.width = 100;
                           comboBox.rowCount = 10;
                       	   comboBox.dataProvider = myArray5;
                       	   myBox.addChild(comboBox);
                       	   
                       }
           	
           } 
           
          /*  private function initClassFactory():void
			{
				
						
				myDropdownFactory = new ClassFactory(List);
				myDropdownFactory.properties = {showDataTips:true, dataTipFunction:myDataTipFunction};
			}
           
           private function myDataTipFunction(item:Object):String
           { 
           	    return String(item);
           }
           */
           private function validateQueryData():void
           {
           	  	var firstOperandType : String  = null; 
           	  	var secondOperandType : String = null;
		 		var firstOperand : String = "";
		 		var secondOperand : String = "";
         
			 	var firstNodeAttributeId : String = null;
			 	var secondNodeAttributeId :String = null;
			 	if(cb1.selectedIndex > -1 && cb2.selectedIndex > -1 && cb3.selectedIndex > -1)
    	     	{
           	 		firstOperand = cb1.selectedItem.toString();
           	 		secondOperand = cb3.selectedItem.toString();
           	 		
           	 		firstNodeList = firstNodeDp[firstOperand];
           	 		secondNodeList = secondNodeDp[secondOperand];
           	 	
           	 		firstOperandType = String(firstNodeList.getItemAt(1));
           	 	 	secondOperandType= String(secondNodeList.getItemAt(1));
           	 	    
           	 	    if((firstOperandType == "Date") && (secondOperandType == "Date"))
           	 	    {
           	 			arithmeticOperand= cb2.selectedItem.toString();
           	 	    	if((arithmeticOperand == "+") || (arithmeticOperand == "/") || (arithmeticOperand == "*"))
           	 	    	{
           	 	    		AlertManager.showWarning("Not a valid operation. Change the Operator");           	 	    		
           	 	    		//Alert.show("Not a valid operation. Change the Operator");
           	 	    		createBigTip("Not a valid operation. Change the Operator");
           	 	    	}
           	 	    	else
           	 	    	{
           	 	    		destroyBigTip();
           	 	    	  	addInputControl();         	 	    
           	 	    	}
           	 		}
           	 		else if((firstOperandType == "Integer") && (secondOperandType == "Integer"))
           	 		{
           	 			//IN case of subtraction of two dates, it should be something integer 
           	 	    	addInputControl();
           	 		}
           	 		else if(firstOperandType.match("Integer") && secondOperandType.match("Date") && (cb2.selectedItem.toString()=="-"))
           	 		{
           	 			AlertManager.showWarning("Not a valid Operand. Second Operand should be DateOffset");
           	 			//Alert.show("Not a valid Operand. Second Operand should be DateOffset");
           	 			createBigTip("Not a valid Operand. Second Operand should be DateOffset");
           	 		}
           	 		else
           	 		{
           	 	    	destroyBigTip();
           	 	    	//here any of the operand is Date and another is Integer, we should use DatePicker
           	 	    	arithmeticOperand= cb2.selectedItem.toString();
           	 	   	 	if((arithmeticOperand == "/") || (arithmeticOperand == "*") )
           	 	    	{
           	 	    		AlertManager.showWarning("Operation is not valid. Change Operator");
           	 	    		//Alert.show("Operation is not valid. Change Operator");
           	 	    		createBigTip("Operation is not valid. Change Operator");
           	 	    	}
           	 	    	else
           	 	    	{
           	 	    		destroyBigTip();
           	 	    		if(this.parentApplication.view != "Result"){          	 	    		
	           	 	    		//Removing text Box
	           	 	    		existingTextBox = myBox.getChildByName("txtInput") as TextInput;
	           	   				var value : String =  null;
	           	   				if(existingTextBox != null)
	           	   				{
	           	   	 	    		value = existingTextBox.text;
	           	   	   				myBox.removeChild(existingTextBox);
	           	   	   				
	           	   	   				//Remove the Time Value Label
		           	 	        	existingValueLabel = labelHBox.getChildByName("label5") as Label;
		           	 	        	if(existingValueLabel != null)
		           	 	        	{
		           	 	        		labelHBox.removeChild(existingValueLabel);
		           	 	        	}
	           	        		}
	           	        	
	           	        		//Removing time interval ComboBox
	           	        		existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
	           	       			if(existingTimeIntervalCb != null)
	           	       			{
	           	       				myBox.removeChild(existingTimeIntervalCb);
	           	       				
	           	       				//Remove the Time Interval Label
	           	       				existingIntervalLabel = labelHBox.getChildByName("label6") as Label;
	           	       				if(existingIntervalLabel != null)
	           	       				{
	           	       				   labelHBox.removeChild(existingIntervalLabel);	
	           	       				}
	           	       			}
	           	       		
	           	       			//Creating the DatePicker
	           	       			existingDatePicker= myBox.getChildByName("datePicker") as DateField;
	           	 	        	if(existingDatePicker == null)
	           	 	        	{
	           	 	        		var datePicker : DateField =  new DateField();
		           	       			datePicker.id = "datePicker";
		           	       			datePicker.name = "datePicker";
		           	       			datePicker.width = 200;
		           	       			datePicker.focusEnabled = true;
		           	       			datePicker.formatString = "MM/DD/YYYY";
		           	            	datePicker.showToday = true;
		           	              
		           	       			//Adding datePicket as childs
		           	 	   			myBox.addChild(datePicker); 
		           	 	     	}
		           	 	     	//Creating the DatePicker Label
		           	 	     	existingPickerLabel = labelHBox.getChildByName("datePickerLabel") as Label;
	           	 	    	   if(existingPickerLabel == null)
	           	 	    	   {
	           	 	    	   	  var pickerLabel : Label = new Label();
	           	 	    	   	  pickerLabel.name = "datePickerLabel";
	           	 	    	   	  pickerLabel.text = "Select Date";
	           	 	    	   	  
	           	 	    	   	  labelHBox.addChild(pickerLabel);
	           	 	    	   }
	           	 	    	}
           	 	    	}
           	 		}
        	  	}
           	} 
           	
           	/*
                This method will enable/Disable the right hand side controls based on the relational operator selected
            */
           	private function righthandSideHandler():void
           	{ 
           		
           		//get the value text box and time Interval picker and datePicker
           		existingTextBox = myBox.getChildByName("txtInput") as TextInput;
           		existingTimeIntervalCb = myBox.getChildByName("timeIntervalCb") as ComboBox; 
           		existingDatePicker= myBox.getChildByName("datePicker") as DateField;
           		
           		//If relational operator is "S NUll" or "Is Not Null", then deactivate the right hand side controls else activate them   
           		if((cb4.selectedItem.toString()=="Is Null") || (cb4.selectedItem.toString()=="Is Not Null"))
           		{
           			if((existingTextBox != null) && (existingTimeIntervalCb != null))
           			{
           				//deactivate both of them
           				existingTextBox.enabled = false;
           				existingTimeIntervalCb.enabled = false;
           			}
           			else
           			{
           				//It's going to be datePicker, so disable date picker
           			   	 if(existingDatePicker != null)
           			   	 {
           			   	 	existingDatePicker.enabled = false;
           			   	 }
           			}
           		}
           		else
           		{
           			//Activate controls if they are disabled 
           			if((existingTextBox != null) && (existingTimeIntervalCb != null))
           			{
           				if((existingTextBox.enabled== false) && (existingTimeIntervalCb.enabled == false))
           				{
           					existingTextBox.enabled = true;
           					existingTimeIntervalCb.enabled =  true; 
           				}
           			}
           			else
           			{
           				if((existingDatePicker != null) && (existingDatePicker.enabled == false))
           				{
           					existingDatePicker.enabled =  true;
           				}
           			}
           		}
            }
            
            /**
			   truncateLongText function is doing the truncatation of Label and create a elipses like "..." 
			   and set value to comboBox text.  
			*/				
    		public function truncateLongText(e : Event):void{   
    					 
    			var txt:String = e.currentTarget.itemToLabel(e.currentTarget.selectedItem);  			
    			e.currentTarget.toolTip=txt; 
    			if(txt.length >= 11)
    				e.currentTarget.text =  txt.substring(0,9).toString() + "...";    			 		   		       		    
    		}
    		
    		/**
    			validateComboboxText function is create to validate first element of arraylist
    			here if a dropdown list contains only on item then it will show in comboBox as selected item
    			if item length is more than 1 then i will show prompt like "-select-" and store item text to myToolTip variable for further refrence.    			 
    		*/ 		
    		public function validateComboboxText():void{    			
    			if(this.parentApplication.operation==""){ 
					 if(myArray1.length <= 1){
		    			 cb1.selectedIndex = 0;
		    			 cb1.toolTip=cb1.selectedLabel.toString();
		    		 }else{
						cb1.selectedIndex = -1;
						cb1.toolTip=cb1.selectedLabel.toString();
		    		 }
					 
					 if(myArray2.length <= 1){
						cb2.selectedIndex = 0;
						cb2.toolTip=cb2.selectedLabel.toString();
					 }else{
						cb2.selectedIndex = -1;
						cb2.toolTip=cb2.selectedLabel.toString();
					 }
					    			 
					 if(myArray3.length <= 1){
						cb3.selectedIndex = 0;
						cb3.toolTip=cb3.selectedLabel.toString();
					 }else{
						cb3.selectedIndex = -1;
						cb3.toolTip=cb3.selectedLabel.toString();
					 }
					
					 if(myArray4.length <= 1){
						cb4.selectedIndex = 0;
						cb4.toolTip=cb4.selectedLabel.toString();
					 }else{
						cb4.selectedIndex = -1;
						cb4.toolTip=cb4.selectedLabel.toString();
					 }    			 
					 
					 if(myArray5.length <= 1){
						cb5.selectedIndex = 0;
						cb5.toolTip=cb5.selectedLabel.toString();
					 }else{
						cb5.selectedIndex = -1;
						cb5.toolTip=cb5.selectedLabel.toString();
					 }
    			 }
    		}
    		
    		private function validate():Boolean{    			
    			var strVal:StringValidator = new StringValidator();    			
                strVal.source = customColumnName;
                strVal.property = "text";
                strVal.required = true;
                
                var event:ValidationResultEvent = strVal.validate();
				var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
				return currentControlIsValid;                                         	           	  				
    		}    		    		
			
			/**
    			createBigTip function is create a errorString which is displayed while validation messages appears.
    			it will disable submitButton control.    			  
    		*/ 	
		    private function createBigTip(s:String):void {		      
		      submitButton.enabled=false;
		      submitButton.errorString = s;		           
		    }
			
			/**
    			destroyBigTip function is remove a errorString which was displayed while validation messages appears.
    			it will enable submitButton control.    			  
    		*/
		    private function destroyBigTip():void {
		      submitButton.enabled=true;
		      submitButton.errorString="";		      
		      
		    }
		    /**
		       for calculare query remove component
		    */
		    private function removeComponent():void {
		      if(this.parentApplication.view=="Result"){
		      	cb4.visible = false;
		      	cb5.visible = false;
		      	txtInput.visible = false;
		      	lb4.visible = false;
		      	lb5.visible = false;
		      	lb6.visible = false;
		      	cb6.visible = true;
		      	lb7.visible = true;
		      }else{
		      	cb4.visible = true;
		      	cb5.visible = true;
		      	txtInput.visible = true;
		      	lb4.visible = true;
		      	lb5.visible = true;
		      	lb6.visible = true;
		      	cb6.visible = false;
		      	lb7.visible = false;
		      }
		    }
    		    	  
	 	]]>
	 </mx:Script>
      
  <!-- <mx:RemoteObject id="rpcService" destination="cdeService"></mx:RemoteObject> -->
   

   <!--customColumnName field validation it is a mandatory field -->  
   <mx:StringValidator id="fieldVal" source="{customColumnName}" property="text" required="true"/> 
   
   
   		
      
     <mx:VBox x="20" y="20" width="655">
      <mx:HBox x="20" y="20" id="labelHBox" width="100%"> 
        <mx:Label id="lb1" name="label1" width="100"  height="50" color="blue" text="{firstEntityLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true" />
      	<mx:Label id="lb2" name="label2" width="100"  height="50" color="blue" text="{arithmeticLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true"/>
      	<mx:Label id="lb3" name="label3" width="100"  height="50" color="blue" text="{secondEntityLabel}" fontStyle="normal" fontWeight="bold" buttonMode="true"/>
      	<mx:Label id="lb4" name="label4" width="100"  height="50" color="blue"  text="{relationalLabel}" fontStyle="normal" fontWeight="bold"/>
      	<mx:Label id="lb5" name="label5" width="100"  height="50" color="blue" text="{timeValueLabel}" fontStyle="normal" fontWeight="bold"/>
      	<mx:Label id="lb6" name="label6" width="100"  height="50" color="blue" text="{timeIntrvalLabel}" fontStyle="normal" fontWeight="bold"/>
      	
      </mx:HBox>
      
      <mx:HBox id ="myBox" x="20" y="60" creationComplete="validateComboboxText()" width="100%">
      	
     	<mx:ComboBox id="cb1" dataProvider="{myArray1}" width="100"  borderThickness="0" borderColor="blue"  
      		prompt="--Select--" itemRenderer="mx.controls.Label" change="validateQueryData()"
      		rowCount="10" close="truncateLongText(event)" toolTip=""/>
      	<mx:ComboBox id="cb2" dataProvider="{myArray2}" width="100"   borderThickness="0" borderColor="blue"  
      		textAlign="center" prompt="--Select--" itemRenderer="mx.controls.Label" close="truncateLongText(event)"
      		change="validateQueryData()" rowCount="10" toolTip=""/>
      	<mx:ComboBox id="cb3" dataProvider="{myArray3}" width="100"   borderThickness="0" borderColor="blue" 
      		change="validateQueryData()"  prompt="--Select--" itemRenderer="mx.controls.Label" rowCount="10"
      		close="truncateLongText(event)" toolTip=""/>
      	<mx:ComboBox id="cb4" dataProvider="{myArray4}" width="100"   borderThickness="0" borderColor="blue"  
      		prompt="--Select--" itemRenderer="mx.controls.Label"  
      		close="truncateLongText(event)" change="righthandSideHandler()" rowCount="10" toolTip=""/>
        <mx:TextInput id="txtInput" name="txtInput"  width="100" restrict="0-9" borderColor="blue" /> 
        <mx:ComboBox id="cb5" name="timeIntervalCb" dataProvider="{myArray5}" width="100"  borderThickness="0" 
        	borderColor="blue" prompt="--Select--" itemRenderer="mx.controls.Label" close="truncateLongText(event)"
        	rowCount="10" toolTip=""/>
       <!-- <mx:Panel  id="p1" height="20" width="100" /> -->
      </mx:HBox> 
     <mx:Spacer height="5"/> 	 
	 <mx:HBox x="20" horizontalGap="6" width="100%">
         <mx:Label id="columnLabel" width="170" text="Please Enter Column Name :" paddingTop="0"/>
         <mx:TextInput id="customColumnName" width="250" restrict="0-9 A-Z a-z" borderColor="blue" focusOut="validate()"/>
         <mx:ComboBox id="cb6" name="timeIntervalCb6" dataProvider="{myArray5}" width="100"  borderThickness="0" 
         	borderColor="blue" prompt="--Select--" itemRenderer="mx.controls.Label" close="truncateLongText(event)"
         	rowCount="10" toolTip="" visible="false"/>
         <mx:Label id="lb7" name="label6" width="100"  height="50" color="blue" text="{timeIntrvalLabel}" 
         	fontStyle="normal" fontWeight="bold" paddingTop="0" visible="false"/>
	 </mx:HBox>
	  
	  <mx:HBox x="20" y="50">
	      <mx:Button id="submitButton" label="{buttonLabel}" click="submitData();"/>
          <mx:Button id="cancelButton" label="Cancel" click="removeMe();"/>  
	  </mx:HBox>
	  
	  </mx:VBox>

</mx:TitleWindow>
