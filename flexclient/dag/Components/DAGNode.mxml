<?xml version="1.0" encoding="utf-8"?>

<mx:Box backgroundColor="white" borderStyle="solid" direction="vertical"  
	xmlns:mx="http://www.adobe.com/2006/mxml"  verticalGap="0"
		implements="flash.utils.IExternalizable" creationComplete="init()" fontSize="9">
<mx:Script>
	<![CDATA[
		import mx.collections.ICollectionView;
		import mx.controls.ComboBox;
		import mx.controls.HScrollBar;
		import mx.containers.HBox;
		import mx.rpc.events.ResultEvent;
		import DAG;
		import mx.events.MenuEvent;
		import mx.controls.Alert;
		import mx.skins.halo.BrokenImageBorderSkin;
		import mx.collections.ArrayCollection;
		import mx.rpc.events.FaultEvent;
		import flash.utils.IDataInput;
		import flash.utils.IDataOutput;
		import mx.controls.Alert;
		import mx.core.Repeater;
		import mx.controls.Menu;
		import mx.collections.Sort;
		import mx.collections.SortField;
			
		private var editedNode:DAGNode;	
		[Bindable]
		public var accSelectedIndx:Number = 0;
		[Bindable]
		public var nodeName:String = "Node";
		[Bindable]
		public var expressionId:int;
		[Bindable]
		public var nodeNumber:String = "1";
		[Bindable]
		public var operatorBetweenAttrAndAssociation:String="AND"; 
		[Bindable]
		public var nodeType:String="";
		[Bindable]
		public var operatorArray:Array = ["AND","OR"];
		[Bindable]
		public var operatorSelectedIndex:int=0;
		[Bindable]
		public var enable:Boolean=true;
		[Bindable]
		public var nodeColor:int =0xFFFFAA;
		
		public var associationList:ArrayCollection;
		public var operatorList:ArrayCollection;
//		public var pathList:ArrayCollection;
		public var dagpathList:ArrayCollection;
		public var outAssociations:ArrayCollection = new ArrayCollection();		
		public var displayoutAssociations:ArrayCollection = new ArrayCollection();		
		public var inAssociations:ArrayCollection = new ArrayCollection();


		[Bindable]
		public function addDisplayOutAssociation(node:String,link:String,operatorIndex:int):void{
			var ass:Association = new Association(node,link,operatorIndex);
			displayoutAssociations.addItem(ass);
				
			 var col:ICollectionView = displayoutAssociations  as ICollectionView;
			 var sort:Sort = new Sort();
		     sort.fields = [new SortField("associatedNode",true)];
		     col.sort = sort;
			 col.refresh();

					
		}

		[Bindable]
		public function removeDisplayOutAssociation(node:String,link:String):void{
			var ass:Association;
			for(var i:int=0;i<displayoutAssociations.length;i++)
			{
				ass = Association(displayoutAssociations.getItemAt(i));
				if(ass.associatedLink == link && ass.associatedNode == node)
				{
					displayoutAssociations.removeItemAt(i);
					break;
				}
			}
		}

		[Bindable]
		public function addOutAssociation(node:String,link:String,operatorIndex:int):void{
			var ass:Association = new Association(node,link,operatorIndex);
			outAssociations.addItem(ass);
			}
		[Bindable]
		public function removeOutAssociation(node:String,link:String):void{
			var ass:Association;
			for(var i:int=0;i<outAssociations.length;i++)
			{
				ass = Association(outAssociations.getItemAt(i));
				if(ass.associatedLink == link && ass.associatedNode == node)
				{
					outAssociations.removeItemAt(i);
					break;
				}
			}
		}
		
		[Bindable]
		public function getOutAssociations():ArrayCollection{
			return outAssociations;
		}
		
		[Bindable]
		public function getOutAssociation(node:String):Association{
			var ass:Association;
			for(var i:int=0;i<outAssociations.length;i++)
			{
				ass = Association(outAssociations.getItemAt(i));
				if(ass.associatedNode == node)
				{
					return ass;
				}
			}
			return null;
		}
		
		[Bindable]
		public function addInAssociation(node:String,link:String,operatorIndex:int):void{
			var ass:Association = new Association(node,link,operatorIndex);
			inAssociations.addItem(ass);
		}
		[Bindable]
		public function removeInAssociation(node:String,link:String):void{
			var ass:Association;
			for(var i:int=0;i<inAssociations.length;i++)
			{
				ass = Association(inAssociations.getItemAt(i));
				if(ass.associatedLink == link && ass.associatedNode == node)
				{
					inAssociations.removeItemAt(i);
					break;
				}
			}
		}
		[Bindable]
		public function getInAssociations():ArrayCollection{
			return inAssociations;
		}
		//-------------
		
		public function init():void
		{
			this.parentApplication.rpcService.addEventListener("fault", faultHandler);
		}
		public function readExternal(input:IDataInput):void {
			nodeName = input.readUTF();
			toolTip=input.readUTF();
			expressionId=input.readInt();
			operatorBetweenAttrAndAssociation = input.readUTF();
			nodeType = input.readUTF();
			associationList = input.readObject() as ArrayCollection;
			operatorList = input.readObject() as ArrayCollection;
			//pathList = input.readObject();
			dagpathList = input.readObject() as ArrayCollection;
			
			
		}

		public function writeExternal(out:IDataOutput):void {
			out.writeUTF(nodeName);
			out.writeUTF(toolTip);
			out.writeInt(expressionId);
			out.writeUTF(operatorBetweenAttrAndAssociation);
			out.writeUTF(nodeType);
			out.writeObject(associationList);
			out.writeObject(operatorList);
			//out.writeObject(pathList);
			out.writeObject(dagpathList);
		}
		//---
		
		public function select():void
		{
			this.setStyle("borderColor","blue");
			this.setStyle("borderThickness","2");
		}
		
		public function unSelect():void
		{
			this.setStyle("borderColor","gray");
			this.setStyle("borderThickness","1");
		}
		
		private function selectionEffect():void{
			this.setStyle("color","blue");
		}
		
		// Method to create an Array-based menu.
		private function createAndShow(event:MouseEvent):void {
			var myMenu:Menu=null;
			if(this.parentApplication.view=="Result")
			{
				myMenu= Menu.createMenu(this, outputMenuData, true);
				if(this.nodeType==DAGConstants.CONSTRAINT_ONLY_NODE)
				{
					this.outputMenuData[0].enabled=true;
					this.outputMenuData[1].enabled=false;
				}
				
			}
			else
			{
				myMenu = Menu.createMenu(this, menuData, true);
			}
			myMenu.show(event.stageX,event.stageY);
			myMenu.addEventListener(MenuEvent.ITEM_CLICK,handleMenuEvent);
			
		}
		public function deleteNode():void
		{
				var ass:Association;
				for(var i:int=0;i<inAssociations.length;i++)
				{
					ass = Association(inAssociations.getItemAt(i));
					this.parent.removeChild(this.parent.getChildByName(ass.associatedLink));
					DAGNode(this.parent.getChildByName(ass.associatedNode)).removeOutAssociation(this.name,ass.associatedLink);
					DAGNode(this.parent.getChildByName(ass.associatedNode)).removeDisplayOutAssociation(this.name,ass.associatedLink);
				}
				for(var j:int=0;j<outAssociations.length;j++)
				{
					ass = Association(outAssociations.getItemAt(j));
					this.parent.removeChild(this.parent.getChildByName(ass.associatedLink));
					DAGNode(this.parent.getChildByName(ass.associatedNode)).removeInAssociation(this.name,ass.associatedLink);
				}
				this.parentApplication.rpcService.deleteNode(this.expressionId);
				this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,deleteHandler);
				
		}
		private function handleMenuEvent(event:MenuEvent):void
		{
			if(event.label == DAGConstants.DELETE)
			{
				deleteNode();
			}
			if(event.label ==DAGConstants.EDIT)
			{
				this.parentApplication.editNode(this);
			}
			if(event.label==DAGConstants.ADD_TO_VIEW)
			{
				this.nodeColor=0xFFFFAA;
				this.outputMenuData[0].enabled=false;
				this.outputMenuData[1].enabled=true;
				this.parentApplication.rpcService.addToView(this.expressionId);
				this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,addToViewHandler);
			}
			if(event.label==DAGConstants.DELETE_FROM_VIEW)
			{
				if(this.nodeType==DAGConstants.VIEW_ONLY_NODE)
				{
					deleteNode();
				}				
				else
				{
					this.nodeColor=0xffb693;
					this.outputMenuData[0].enabled=true;
					this.outputMenuData[1].enabled=false;
					this.parentApplication.rpcService.deleteFromView(this.expressionId);
					this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,deleteFromViewHandler);
					
				}
				
			}
		}
		
		public function deleteFromViewHandler(event:ResultEvent):void
		{
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,deleteFromViewHandler,false);
		}
		public function addToViewHandler(event:ResultEvent):void
		{
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,addToViewHandler,false);
		}
		public function deleteHandler(event:ResultEvent):void
		{
			this.parent.removeChild(this.parent.getChildByName(this.name));
			this.parentApplication.totalNodeMap.remove(this.name);
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,deleteHandler,false);
			if(this.nodeType==DAGConstants.CONSTRAINT_VIEW_NODE)
			{
				this.parentApplication.showValidationMessagesToUser(DAGConstants.DELETE_LIMITS_MESSAGE);
			}
		}
		
		public function faultHandler (event:FaultEvent):void {
				// Deal with event.fault.faultString, etc.
			Alert.show(event.fault.faultString, 'Error');
		}
			
	
		// The Array data provider
		[Bindable]
		public var menuData:Array = [	
		{label: "Edit", type: "radio", toggled: false},
		{label: "Delete", type: "radio", toggled: false}
		
		];
		
		[Bindable]
		public var outputMenuData:Array = [	
		{label: "Add To View", type: "radio", toggled: false,enabled:false},
		{label: "Delete From View", type: "radio", toggled: false,enable:true}
		
		];
		
		public function setOperatorHandler(event:ResultEvent):void
		{
			this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,setOperatorHandler,false);
		}
		
		public function operatorChange(event:Event):void
		{
		 var cb:ComboBox=event.currentTarget as ComboBox;
	     var index:int = parseInt(cb.name) as int;

		 this.parentApplication.rpcService.addEventListener(ResultEvent.RESULT,setOperatorHandler);
		 this.parentApplication.rpcService.setLogicalOperator(this,index,cb.selectedLabel);
		 
		 var outAssociation:Association =  displayoutAssociations.getItemAt(index) as Association;
		 outAssociation.operatorIndex=cb.selectedIndex;

		 var dagPath:DAGPath  =this.parentApplication.dagPathUIMap.getValue(outAssociation.associatedLink) as DAGPath;
		 dagPath.operatorIndex = cb.selectedIndex;
	 	 		
		}
	
		
	]]>
</mx:Script>
	<mx:HBox name="Node" backgroundColor="{nodeColor}" borderStyle="solid" width="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:Canvas backgroundColor="0xF5F5F5"  borderStyle="solid">
			<mx:Label text="{nodeNumber}" />
		</mx:Canvas>
		<mx:Label styleName="Arial"  text="{nodeName}" color="blue" />
		
		<mx:Button label=">" click="createAndShow(event);" />
	</mx:HBox>
		<mx:VBox id="assVbox" name="Association" label="Associations" width="100%" verticalGap="0" visible="false">
		
			<mx:Repeater id="assRep" name="Repeater" dataProvider="{displayoutAssociations}">
			
				<mx:HBox name="hbox" width="100%" borderStyle="solid">
				<mx:Canvas backgroundColor="0xF5F5F5"  borderStyle="solid">
					<mx:Label text="{assRep.currentItem.associatedNode}" />
				</mx:Canvas>
				<mx:ComboBox id="operatorCombo"  name="{assRep.currentIndex.toString()}"  dataProvider="{operatorArray}" change="operatorChange(event)"  selectedIndex="{assRep.currentItem.operatorIndex}" enabled="{enable}"/>
		
			</mx:HBox>
			</mx:Repeater>
		</mx:VBox>
</mx:Box>
