<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*" 
	xmlns:adobe="http://www.adobe.com/2006/fc" preinitialize="preInit()" creationComplete="creationComp()" xmlns:components="components.*" autoLayout="true">
<mx:Script source="../script/validate.as"/>
<mx:Script>
	<![CDATA[
		import util.MetadataModel;
		import util.Utility;
		import util.Constants;
		import util.MSPParameter;
		import valueobjects.SpecimenData;
		import mx.binding.utils.BindingUtils;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		import mx.managers.PopUpManager;
		
		[Bindable]	public var spData:SpecimenData;
		[Bindable]	public var storage:ArrayCollection = new ArrayCollection();
		[Bindable]	public var mode:String;
		[Bindable]	public var specimenNo:String;
		private function preInit():void
		{


			spData = parentApplication.spRepeater.currentItem;

			var index:int = parentApplication.specimenColl.getItemIndex(spData)+1;
			specimenNo = "Specimen "+index;
			
			switchSpType(null);
			
			
		}
		
		private function creationComp():void
		{
			if(spData.specimenClass == Constants.MOLECULAR)
			{
				spConcentration.enabled = true;
			}
			else
			{
				spConcentration.enabled = false;
			}
			
			if(!spData.isParentEnabled)
				spParentName.enabled = false;
				
			if(mode == MSPParameter.MODE_PARAM_VAL_EDIT)
			{
				spParentNameBox.visible = false;
				spParentNameBox.height = 0.
				storageContBox.visible= false;
				storageContBox.height = 0;
				
//				derivativeBtn.visible = false;
	//			derivativeBtn.height = 0;
				
				specimenAccordion.removeChild(collEventBox);
				specimenAccordion.removeChild(recEventBox);
				spClass.enabled = false;
				spType.enabled = false;
			}
			storage.addItem("Virtual");
			storage.addItem("Manual");
			storage.addItem("Auto");
			
			
			//Check box
			Utility.bindData(isCopy, "selected", spData, "isSelected");
			
			//Selection of parent
//			Utility.bindData(spParent, "selectedValue", spData, "specimenParent"); 
			
			//SCG Name
//			Utility.bindData(spSCGName, "text", spData, "scgName");
			
			//Parent Specimen
			Utility.bindData(spParentName, "text", spData, "parentName");
			Utility.bindData(spParentName, "errorString", spData,"parentNameErrStr");
			//Label
			Utility.bindData(spLabel, "text", spData,"specimenLabel");
			Utility.bindData(spLabel, "errorString", spData,"specimenLabelErrStr");
			//Barcode
			Utility.bindData(spBarCode, "text", spData, "specimenBarcode");
		
			//Specimen Class
			Utility.bindData(spClass, "selectedItem", spData, "specimenClass");
			Utility.bindData(spClass, "errorString", spData,"specimenClassErrStr");
			
			//Specimen Type
			Utility.bindData(spType, "selectedItem", spData, "specimenType");
			Utility.bindData(spType, "errorString", spData,"specimenTypeErrStr");

			//Tissue Site
			Utility.bindData(spTissueSite, "selectedItem", spData, "tissueSite");
			Utility.bindData(spTissueSite, "errorString", spData,"tissueSiteErrStr");
			//Bind Tissue Side
			Utility.bindData(spTissueSide,"selectedItem",spData,"tissueSide");
			Utility.bindData(spTissueSide, "errorString", spData,"tissueSideErrStr");
			//Pathological Status
			Utility.bindData(spPathologicalStatus,"selectedItem",spData,"pathologicalStatus");
			Utility.bindData(spPathologicalStatus, "errorString", spData,"pathologicalStatusErrStr");
			//Bind Creation date
			Utility.bindData(spCreatedOn,"selectedDate",spData,"creationDate");
			
			//Bind Quantity
			Utility.bindData(spQuantity,"text",spData,"quantity");
			Utility.bindData(spQuantity, "errorString", spData,"quantityErrStr");
			//Bind Concentration
			Utility.bindData(spConcentration,"text",spData,"concentration");
			//bindData(spQuantity,"restrict",spConcentration,"text",false);
			
			//Bind Storage
			Utility.bindData(spStorage,"selectedItem",spData,"storage");
			
			//Bind Comments
			Utility.bindData(spComment, "text", spData, "comment");

		}
		
		private function switchSpType(event:Event):void
		{
			spData.specimenTypePVList = MetadataModel.getInstance().getSpecimenTypeCollection(spData.specimenClass);
			spData.calcUnit();
			if(event != null)
			{
				if(spData.specimenClass == Constants.MOLECULAR)
				{
					spConcentration.enabled = true;
				}
				else
				{
					spConcentration.enabled = false;
				}
			}
		}
		
		private function printSpDetails(spData:SpecimenData):void
		{
			Alert.show("SPECIMEN DETAILS: \n"+
					   "parentName: "+spData.parentName+"\n"+
					   "specimenLabel: "+spData.specimenLabel+"\n"+
					   "specimenBarcode: "+spData.specimenBarcode+"\n"+
					   "specimenClass: "+spData.specimenClass+"\n"+
					   "specimenType: "+spData.specimenType+"\n"+
					   "tissueSite: "+spData.tissueSite+"\n"+
					   "tissueSide: "+spData.tissueSide+"\n"+
					   "pathologicalStatus: "+spData.pathologicalStatus+"\n"+
					   "creationDate: "+spData.creationDate+"\n"+
					   "quantity: "+spData.quantity+"\n"+
					   "concentration: "+spData.concentration);
		}
		private function onClick(event:Event):void
		{
			//Alert.show(spParent.selectedValue+'')
			//printSpDetails(spData);
			if(isCopy.selected)
			{
				//myRemoteObject.writeSpecimen(spData);
			}
			else
			{
				//myRemoteObject.readSpecimen();
			}
			//spData.tissueSide = "Right";
		}
		
		/*public function regularExpression(element:*, text:String):Boolean
   		{
      		var regExp:RegExp = new RegExp(text,"i");
      		return(regExp.test(mySTI.itemToLabel(element)));
   		}*/
   		private function bindExData():void
   		{
   			Utility.bindData(exIDPane, "exIdColl", spData, "exIdColl");
   		}
   		private function bindCollectedEvents():void
   		{
   			Utility.bindData(colledtedEventPane, "collectionEvent", spData, "collectionEvent");
   			//Alert.show("HI 1 "+collectionEvent.toString());
				//eventContentPane.collEvent = collectionEvent; 
			colledtedEventPane.createComp();
   		}
   		private function bindReceivedEvents():void
   		{
   			Utility.bindData(receivedEventPane, "receivedEvent", spData, "receivedEvent");
   			//Alert.show("HI 1 "+collectionEvent.toString());
				//eventContentPane.collEvent = collectionEvent; 
			receivedEventPane.createComp();
   		}
   		
   		private function bindBiohazards() : void
   		{
   			Utility.bindData(biohazardPane,"biohazardColl", spData,"biohazardColl");
   		}
   		
		private function createPopUp():void 
		{
	    	var pop1:DerivedSpecimenPane = DerivedSpecimenPane(
	        PopUpManager.createPopUp(this, DerivedSpecimenPane, true));
    		pop1.derivedSpColl = spData.derivedSpColl;
    		pop1.mode = mode;
			pop1.title = "Create Derived Specimen";

			/* creating a new derived sp array collection in case of cancel button pressed on derived sp page */
			var tempDerivedSpColl:ArrayCollection = new ArrayCollection();
			for(var i:int=0;i<spData.derivedSpColl.length;i++)
			{
				var spDataTemp:SpecimenData = spData.derivedSpColl.getItemAt(i) as SpecimenData;
				var spDataDeepCopied:SpecimenData = spDataTemp.deepCopy();
				tempDerivedSpColl.addItem(spDataDeepCopied);
			}
    		pop1.derivedSpCollOriginal = tempDerivedSpColl;
			    	
	    	Utility.bindData(pop1,"derivedSpColl", spData,"derivedSpColl");

//	    PopUpManager.centerPopUp(pop1);


		   }


   		
   	/*	public function validateSpecimen(index:int):Boolean
   		{
   			Alert.show("in specimnen Pane validation:");
   			var isValid:Boolean = true;
   			var specimenNumber :String = " for specimen "+index;
   			var parentNameValMesg:String;
   			if(parentApplication.isSpSCGName != null)
   			{
   			if(parentApplication.isSpSCGName.selected)
   			{
				parentNameValMesg = "Please enter specimen collection group name";
				
   			}
   			else
   			{
   				parentNameValMesg = "Please enter parent specimen label";
   			}
 			   			isValid = validateRequiredField(spParentName,"text",parentNameValMesg) && isValid;
   			}
   			

   			isValid= validateRequiredField(spLabel,"text","Please enter label") && isValid;
   			//isValid= validateRequiredField(spBarCode,"text","Please enter barcode") && isValid;

			isValid = validateComboBoxField(spClass,"selectedItem","Please select class") && isValid;
			isValid = validateComboBoxField(spType,"selectedItem","Please select type") && isValid;
			isValid = validateComboBoxField(spTissueSite,"selectedItem","Please select tissue site") && isValid;			
			isValid = validateComboBoxField(spTissueSide,"selectedItem","Please select tissue side") && isValid;			
			isValid = validateComboBoxField(spPathologicalStatus,"selectedItem","Please select pathological status") && isValid;			
			
   			isValid =  validateNumberField(spQuantity,"text","Please enter Quantity",true,0) && isValid;
   			isValid =  validateNumberField(spConcentration,"text","Please enter concentration",true,0) && isValid;
			if(mode == MSPParameter.MODE_PARAM_VAL_ADD && colledtedEventPane != null)
   			{
	   			isValid = colledtedEventPane.collectedEventContentPane.validateCollEvent(index) && isValid;
   			}
   			if(mode == MSPParameter.MODE_PARAM_VAL_ADD && receivedEventPane != null)
   			{
				isValid= receivedEventPane.receivedEventContentPane.validateRecvEvent(index) && isValid;
   			}
		
			if(exIDPane != null)
			{
				isValid = exIDPane.validateExIds(index) && isValid;
			}
			if(biohazardPane != null)
			{
				isValid = biohazardPane.validateBiohazards(index) && isValid;
					
			}
			return isValid;
		}        
*/
		/*public function changeParent():void
		{
			if(isSpSCGName.selected)
			{
				spParentName.text= null;
			}
			else
			{
				spSCGName.text = null;
			}
		}*/
		public function chkStorage() : void
		{
//			Alert.show("In this build only Virtual storage is supported.");
	//		spStorage.selectedItem = "Virtual"
			
		}
	]]>
</mx:Script>
	<mx:VBox backgroundColor="#E2EFFF" width="100%">
		<components:MyCanvas >
			<mx:CheckBox id="isCopy" click="onClick(event)"/>
			<mx:Label text="{specimenNo}" x="25"/>
		</components:MyCanvas>
	
		<!--<components:MyCanvas>
			<mx:HBox>
				<mx:RadioButtonGroup id="spParent"/>
				<mx:RadioButton id="isSpSCGName" label="SCG"  group="{spParent}" click="changeParent()"/>
				<mx:RadioButton id="isSpParentName" label="Specimen" group="{spParent}" click="changeParent()"/>
			</mx:HBox>
		</components:MyCanvas>-->

		<components:MyCanvas id="spParentNameBox">
			<mx:TextInput id="spParentName"/>
		</components:MyCanvas>

	
		<components:MyCanvas>
			<mx:TextInput id="spLabel"/>
		</components:MyCanvas>
	
		<components:MyCanvas>
			<mx:TextInput id="spBarCode"/>
		</components:MyCanvas>

	</mx:VBox>	
		

	<components:MyCanvas>
		<adobe:AutoComplete id="spClass" dataProvider="{MetadataModel.getInstance().specimenClassPVList}" change="switchSpType(event)"/>
	</components:MyCanvas>
	
	<components:MyCanvas>
		<adobe:AutoComplete id="spType" dataProvider="{spData.specimenTypePVList}" lookAhead="true"/>
	</components:MyCanvas>
		
	<components:MyCanvas>	
		<adobe:AutoComplete id="spTissueSite" dataProvider="{MetadataModel.getInstance().tissueSitePVList}" lookAhead="true"/>
	</components:MyCanvas>
	
	<components:MyCanvas>
		<adobe:AutoComplete id="spTissueSide" dataProvider="{MetadataModel.getInstance().tissueSidePVList}" lookAhead="true"/>
	</components:MyCanvas>
	
	<components:MyCanvas>
		<adobe:AutoComplete id="spPathologicalStatus" dataProvider="{MetadataModel.getInstance().pathologicalStatusPVList}" lookAhead="true"/>
	</components:MyCanvas>

	<mx:VBox backgroundColor="#E2EFFF" width="100%">

		<components:MyCanvas id="createdOnBox">
			<mx:DateField id="spCreatedOn" formatString="{Constants.DATE_FORMAT}" yearNavigationEnabled="true" keyDown="spCreatedOn.open()"/>
		</components:MyCanvas>
	
		<components:MyCanvas>
			<mx:HBox>
				<mx:TextInput id="spQuantity" width="50" restrict="[0-9]."/>
				<mx:Label text="{spData.unit}"/>
			</mx:HBox>
		</components:MyCanvas>
	
		<components:MyCanvas>
			<mx:HBox>
				<mx:TextInput id="spConcentration" width="50" restrict="[0-9]."/>
				<mx:Label htmlText="{Constants.UNIT_CONCENTRATION}"/>
			</mx:HBox>
		</components:MyCanvas>
		<components:MyCanvas id="storageContBox">
			<adobe:AutoComplete id="spStorage" dataProvider="{storage}" lookAhead="true" change="chkStorage()"/>
		</components:MyCanvas>

	</mx:VBox>
	
	<mx:Accordion id="specimenAccordion" resizeToContent="true" backgroundColor="#E2EFFF" headerHeight="25" >
		<mx:VBox label="Comment">
			<mx:TextArea id="spComment"/>
		</mx:VBox>
		<mx:VBox label="Collected Event" id="collEventBox">
			<components:CollectedEventPane id="colledtedEventPane" creationComplete="bindCollectedEvents()" />
		</mx:VBox >
		<mx:VBox label="Received Event" id="recEventBox">
			<components:ReceivedEventPane id="receivedEventPane" creationComplete="bindReceivedEvents()" />
		</mx:VBox >
	
		<mx:VBox label="External Identifier">
			<components:ExternalIdentifierPane id="exIDPane" creationComplete="bindExData()" />
		</mx:VBox>
		
		<mx:VBox label="Biohazards">
			<components:BiohazardPane id="biohazardPane" creationComplete="bindBiohazards()"/>
		</mx:VBox>
	</mx:Accordion>
	<mx:Button id="derivativeBtn" label="Derivative" width="{specimenAccordion.width}" click="createPopUp()" height="25"/>


</mx:VBox>