<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" horizontalAlign="left" xmlns:local="*" preinitialize="preInit()" creationComplete="creationComp()" xmlns:components="components.*" backgroundColor="white" paddingTop="0">

<mx:Script>
	<![CDATA[
		import mx.messaging.management.Attribute;
		import util.Constants;
		import util.Utility;
		import mx.managers.HistoryManager;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.AbstractOperation;
		import mx.messaging.ChannelSet;
		import util.MSPParameter;
		import util.MSPParameterReader;
		import util.MetadataManager;
		import mx.events.DragEvent;
		import flash.utils.setInterval;
		import mx.managers.PopUpManager;
		import valueobjects.SpecimenData;
		
		import mx.rpc.events.ResultEvent;
		import flash.utils.getQualifiedClassName;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		
		import flash.utils.getQualifiedClassName;
		import mx.controls.Alert;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.remoting.mxml.RemoteObject;
		private var counter:int = 1;
		private var mspParameter:MSPParameter ;
		
		[Bindable]
		public var specimenColl:ArrayCollection = new ArrayCollection();
	
		public var specimenDataBean:SpecimenData = new SpecimenData();
		private var copyFromIndex:int = -1;
		private var attributeList:ArrayCollection = null;
		
		public var metadataManager:MetadataManager = new MetadataManager();
	

		public static var PERPAGE:int = 3;
		public var currPage:int = 1;
		
		public var showParentSelection:Boolean = true;
		[Bindable]
		public var startingIndex:int = 0;

		private function preInit():void
		{
		
			mspParameter = MSPParameterReader.processParam(Application.application.parameters);
			specimenColl = new ArrayCollection();
						
			metadataManager.init(mspParameter.mode);
			metadataManager.addEventListener("initCompleteEvent",init);
			if(mspParameter.showParentSelection == "true")
			{
				showParentSelection = true;
			}
			else
			{
				if(mspParameter.showParentSelection == "false")
				{
					showParentSelection = false;
				}
			}
			

			
//			PopUpManager.createPopUp(this,ProgressBarPanel,true);
			//flash.
			//var spCount:String = Application.application.parameters.spCount;
			//Alert.show("firstParam "+spCount);
			
		}
		
		private function init(event:Event):void
		{
			if(mspParameter.mode == MSPParameter.MODE_PARAM_VAL_ADD)
			{
				specimenColl = new ArrayCollection();
				var spCounts:int = int(mspParameter.spCount);
				
				//Alert.show("spCounts "+spCounts);
				for(var i:int=0; i<spCounts; i++)
				{
					
					var spData:SpecimenData = initSpecimenData();
					specimenColl.addItem(spData);
				}
			}
			else
			{
				//TODO
				//Alert.show("Init of multipl sepcimen");
				specimenColl = metadataManager.spDataList;
				if(specimenColl==null)
				{
					specimenColl = new ArrayCollection();
					addMoreSpecimen(null);
				}
			}	
			
			
			if(specimenColl.length > PERPAGE)
			{
				btnNext.enabled = true;
			}
			else
			{
				btnNext.enabled = false;
			}
		}
		
		private function initSpecimenData(): SpecimenData
		{

			var spData:SpecimenData = new SpecimenData("Label"+counter,"Barcode"+counter,"Left");	
			spData.collectionEvent.userName = specimenDataBean.collectionEvent.userName;
			
			spData.receivedEvent.userName = specimenDataBean.receivedEvent.userName;
			counter++;
			
			if(mspParameter.parentType==MSPParameter.PARENT_TYPE_PARAM_VAL_SCG)
			{
				spData.parentType = Constants.NEW_SPECIMEN;
				spData.parentName = mspParameter.parentName;


				

			}
			else
			{
				spData.parentType = Constants.DERIVED_SPECIMEN;
				spData.parentName = mspParameter.parentName;				
			}
			return spData;
		}
		
		private function creationComp():void
		{

			selectionBox.visible = showParentSelection;
			spParent.selectedValue = "New Specimen";
			spLabelPane.spOrScg.text = "* Specimen Group Name";
			myRemoteObject.initFlexInterfaceForMultipleSp();
			
			
		}

		private function addMoreSpecimen(event:Event):void
		{
			var spData:SpecimenData = initSpecimenData();
			specimenColl.addItem(spData);	
			if(specimenColl.length > PERPAGE)
			{
				btnNext.enabled = true;
			}
			
		}
		
		
		private function deleteSpecimen(event:Event) : void
		{
			for(var i:int;i<specimenColl.length;i++)
			{
				var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
				if(spData.isSelected)
				{
					specimenColl.removeItemAt(i);
					
				}
			}	
			if(specimenColl.length%PERPAGE == 0)
			{
				if(startingIndex -PERPAGE >0)
				{
					startingIndex = startingIndex- PERPAGE;	
				}
			}
			
		}
		 
		private function copySPData(event:Event):void
		{
			//Alert.show("Here in Copy");
			copyFromIndex = -1;
			for(var i:int;i<specimenColl.length;i++)
			{
				var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
				if(spData.isSelected)
				{
					copyFromIndex = i;
					spData.isSelected = false;
					break;
				}
			}
			
			if(copyFromIndex == -1)
			{
				copyAttributes();
				
			}
		}
		
		/* this function copy the attributes of first specime to be copied to other specimens */
		private function copyAttributes() : void
		{
			attributeList= new ArrayCollection();
/*			if(spLabelPane.selectParentChkBox.selected)
			{
				attributeList.addItem(Constants.PARENT);
				spLabelPane.selectParentChkBox.selected = false;
			}*/
			if(spLabelPane.nameChkBox.selected)
			{
				attributeList.addItem(Constants.PARENT_NAME);	
				spLabelPane.nameChkBox.selected = false;
			}
			if(spLabelPane.labelChkBox.selected)
			{
				attributeList.addItem(Constants.LABEL);	
				spLabelPane.labelChkBox.selected = false;
			}
			if(spLabelPane.barcodeChkBox.selected)
			{
				attributeList.addItem(Constants.BARCODE);
				spLabelPane.barcodeChkBox.selected = false;
			}
			if(spLabelPane.classChkBox.selected)
			{
				attributeList.addItem(Constants.CLASS);
				spLabelPane.classChkBox.selected = false;
			}
			if(spLabelPane.typeChkBox.selected)
			{
				attributeList.addItem(Constants.TYPE);
				spLabelPane.typeChkBox.selected = false;
			}
			if(spLabelPane.tissueSiteChkBox.selected)
			{
				attributeList.addItem(Constants.TISSUE_SITE);
				spLabelPane.tissueSiteChkBox.selected = false;
			}
			if(spLabelPane.tissueSideChkBox.selected)
			{
				attributeList.addItem(Constants.TISSUE_SIDE);
				spLabelPane.tissueSideChkBox.selected = false;
			}
			if(spLabelPane.pathStatusChkBox.selected)
			{
				attributeList.addItem(Constants.PATHOLOGICAL_STATUS);
				spLabelPane.pathStatusChkBox.selected = false;
			}
			if(spLabelPane.createdOnChkBox.selected)
			{
				attributeList.addItem(Constants.CREATED_ON);
				spLabelPane.createdOnChkBox.selected = false;
			}
			if(spLabelPane.quantityChkBox.selected)
			{
				attributeList.addItem(Constants.QUANTITY);
				spLabelPane.quantityChkBox.selected = false;
			}
			if(spLabelPane.concentrationChkBox.selected)
			{
				attributeList.addItem(Constants.CONCENTRATION);
				spLabelPane.concentrationChkBox.selected = false;
			}
			if(spLabelPane.commentChkBox.selected)
			{
				attributeList.addItem(Constants.COMMENT);
				spLabelPane.commentChkBox.selected = false;
			}
			if(spLabelPane.collEventChkBox.selected)
			{
				attributeList.addItem(Constants.COLLECTED_EVENT);
				spLabelPane.collEventChkBox.selected = false;
			}
			if(spLabelPane.recEventChkBox.selected)
			{
				attributeList.addItem(Constants.RECEIVED_EVENT);
				spLabelPane.recEventChkBox.selected = false;
			}
			if(spLabelPane.externalIdChkBox.selected)
			{
				attributeList.addItem(Constants.EXTERNAL_IDENTIFIER);
				spLabelPane.externalIdChkBox.selected = false;
			}
		
			if(spLabelPane.biohazardChkBox.selected)
			{
				attributeList.addItem(Constants.BIOHAZARDS);
				spLabelPane.biohazardChkBox.selected = false;
			}
			if(spLabelPane.derivativeChkBox.selected)
			{
				attributeList.addItem(Constants.DERIVATIVE);
				spLabelPane.derivativeChkBox.selected = false;
			}
			
		}
		private function pasteSPData(event:Event):void
		{
			if(copyFromIndex!=-1)
			{
				var spDataCopyFrom:SpecimenData = SpecimenData(specimenColl.getItemAt(copyFromIndex));
				for(var i:int;i<specimenColl.length;i++)
				{
					var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
					if(spData.isSelected)
					{
						spData.copy(spDataCopyFrom);
						spData.isSelected = false;
					}
				}
			}
			else
			{
				if(attributeList != null && attributeList.length>0)
				{
					if(specimenColl != null && specimenColl.length>1)
					{
						var spDataFrom:SpecimenData = SpecimenData(specimenColl.getItemAt(0));
						for(var j:int=1;j<specimenColl.length;j++)
						{
							var spDataTo:SpecimenData = SpecimenData(specimenColl.getItemAt(j));
							if(spDataTo.isSelected)
							{
								spDataTo.copyAttributes(spDataFrom,attributeList);
								spDataTo.isSelected = false;
							}
						}
					}
				}
			}
		}
		
		private function submitSpecimen(event:Event):void
		{
			var validateVal:Boolean = true;	

			for(var i:int=0;i<specimenColl.length;i++)
			{	
				validateVal = A[i].validateSpecimen(i+1) && validateVal;
			}
		
			if(validateVal)
			{
				myRemoteObject.writeSpecimen(specimenColl);
			}
			else
			{
				Alert.show("Please resolve all errors marked with red box.");
			}
		}
		
		private function handleReadSpecimen(event:ResultEvent):void
   		{
   			//var obj:SpecimenData = SpecimenData(event.result);
   			//Alert.show('Result '+obj);
   			//printSpDetails(obj);
   		}
   		
   		private function handleWriteSpecimen(event:ResultEvent):void
   		{
   			var obj:Object = event.result;
   			var message:String = obj.toString();
   			messageText.text = message;
   			var f:String = "callSubmitSpecimen";
		    ExternalInterface.call(f);
   			//printSpDetails(obj);

   		}
   		private function handleInitMultipleSp(event:ResultEvent) : void
   		{
   			//Alert.show("in init multiple SPecimen");
   			specimenDataBean = event.result as SpecimenData;
   			
   			//Alert.show("data in bean:"+specimenDataBean.collectionEvent.userName);
   		}
   		
   		private function getAlternateColor(index:int):uint 
   		{
   			if(index%2==0)
   			{
   				return 0xF0F8FF;
   			}	
   			else
   			{
   				return 0xF0F8FF;
   			}
   		}
   		
   		private function getNextPage(event:Event):void
   		{
   			startingIndex = startingIndex + PERPAGE;
   			
   		 }


		private function getPreviousPage(event:Event):void
		{
			if(startingIndex-PERPAGE >=0)
			{
			startingIndex = startingIndex - PERPAGE;
				
			}
			
		}
		
		public function selectAllSp(): void
		{
			Alert("In select all sp");
		}
   		
   		private function setParentLabel(name:String):void
   		{
   			spLabelPane.spOrScg.text = name;
   			for(var i:int=0;i<specimenColl.length;i++)
   			{
   				var spData:SpecimenData = SpecimenData(specimenColl.getItemAt(i));
	   			if(isSpParentName.selected)
	   			{
	   				spData.parentType = Constants.DERIVED_SPECIMEN;
	   			}
	   			else
	   			{
	   				spData.parentType = Constants.NEW_SPECIMEN;	
	   			}
  			}
   			

   		}
	]]>
</mx:Script>

	<mx:RemoteObject id="myRemoteObject" destination="cdeService" showBusyCursor="true" >
		<mx:method name="writeSpecimen" result="handleWriteSpecimen(event)"/>
		<mx:method name="readSpecimen" result="handleReadSpecimen(event)"/>
		<mx:method name="initFlexInterfaceForMultipleSp" result="handleInitMultipleSp(event)"/>

	</mx:RemoteObject>
	<mx:Text id="messageText"/>
	<mx:HBox id="selectionBox">
		<mx:Text text="Do you want to create New Specimen or Deived Specimen?" fontWeight="bold"/>
		<mx:RadioButtonGroup id="spParent"/>
		<mx:RadioButton id="isSpSCGName" label="New Specimen"  group="{spParent}" click="setParentLabel('* Specimen Group Name')" fontWeight="bold"/>
		<mx:RadioButton id="isSpParentName" label="Derived Specimen" group="{spParent}" click="setParentLabel('* Parent Name ')" fontWeight="bold"/>
	</mx:HBox>
	<mx:HBox>
		<mx:Button label="Copy" click="copySPData(event)" toolTip="Copy" borderColor="#AAAAFF"/>
		<mx:Button label="Paste" click="pasteSPData(event)" toolTip="Paste" borderColor="#AAAAFF"/>
		<mx:Spacer width="40"/>
		<mx:Button label="Add More" click="addMoreSpecimen(event)" toolTip="Add More" borderColor="#AAAAFF"/>
		<mx:Button label="Delete" click="deleteSpecimen(event)" toolTip="Delete" borderColor="#AAAAFF"/>	
		<mx:Spacer width="40"/>
		<mx:Button label="Submit" click="submitSpecimen(event)" id="submitButton" toolTip="Submit" borderColor="#AAAAFF"/>
		<mx:Button label="Previous" click="getPreviousPage(event)" id="btnPrevious" toolTip="Previous" borderColor="#AAAAFF" visible="false"/>
		<mx:Button label="Next" click="getNextPage(event)" id="btnNext" toolTip="Next" borderColor="#AAAAFF" visible="false"/>
	</mx:HBox>
	
	<mx:HBox>
	
		<components:SpecimenLabelPane backgroundColor="#F0F8FF" id="spLabelPane"/>

		<mx:Repeater id="spRepeater" dataProvider="{specimenColl}">	
			<components:SpecimenPane id="A" backgroundColor="{getAlternateColor(spRepeater.currentIndex)}"/>
		</mx:Repeater>
	</mx:HBox>
	
</mx:Application>
