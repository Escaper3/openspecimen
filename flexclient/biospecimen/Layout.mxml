<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" preinitialize="getCPData()" height="90%" width="70%" backgroundColor="#FFFFFF" creationComplete="initApp();">
  <mx:Script>
  	<![CDATA[
  		import mx.events.CloseEvent;
  		import mx.core.Container;
  		import mx.events.MoveEvent;
  		import mx.events.TreeEvent;
  		import mx.collections.ArrayCollection;
		import valueobjects.NameValueBean;
		import mx.controls.Alert;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.remoting.RemoteObject;
		import mx.validators.ValidationResult;
		import flash.utils.getQualifiedClassName;
	    import mx.collections.XMLListCollection;
		import flash.xml.*;
		import mx.events.FlexEvent;

    [Bindable]
		public var cpCollection:ArrayCollection = new ArrayCollection();
  
                public var pCollection:ArrayCollection = new ArrayCollection(); 
  
   
                 private var xmlString:XML = new XML();
   
    
                 private var treeData:XMLListCollection = new XMLListCollection();

      [Bindable]
                 [Embed(source='/images/nolines_minus.gif')]
                 private var minusIcon:Class; 
	    
     [Bindable]
                 [Embed(source='/images/nolines_plus.gif')]
                 private var plusIcon:Class;  
 
     [Bindable]
                [Embed(source='/images/SpecimenCollectionGroup.gif')]
                private var scgIcon:Class;  

    [Bindable]
         		[Embed(source='/images/Specimen.gif')] 
         		public var spIcon:Class;  
     [Bindable] 
                [Embed(source="/images/graydot.gif")]
                public var fscgIcon:Class;  
	 [Bindable]
                 [Embed(source='/images/pendingSpecimen.gif')]
                 private var pendingSpecimenIcon:Class;  		
	 [Bindable]
                 [Embed(source='/images/pendingAliquot.gif')]
                 private var pendingAliquotIcon:Class;  
	  [Bindable]
                 [Embed(source='/images/pendingDerive.gif')]
                 private var pendingDerivedIcon:Class;  
	 [Bindable]
                 [Embed(source='/images/pendingSCG.gif')]
                 private var pendingSCGIcon:Class;  
                 
	 [Bindable]
                 [Embed(source='/images/Phase_col.gif')]
                 private var phaseCPIcon:Class;  
    
     [Bindable]
                 [Embed(source='/images/Phase_blk.gif')]
                 private var pendingPhaseCPIcon:Class;  
    
     [Bindable]
                 [Embed(source='/images/Cycle_col.gif')]
                 private var cycleCPIcon:Class;  
    
     [Bindable]
                 [Embed(source='/images/Cycle_blk.gif')]
                 private var pendingCycleCPIcon:Class;  
    
     [Bindable]
                 [Embed(source='/images/Arm_col.gif')]
                 private var armCPIcon:Class;  
    
     [Bindable]
                 [Embed(source='/images/Arm_blk.gif')]
                 private var pendingArmCPIcon:Class;  
    
    [Bindable]
			private var title:String = "Specimen Details for"; 
			// Store the specified node id to show as selected
			private var nodeIdToSelect:String; 
			// Store the inode id of previously selected node
			private var previouslySelectednodeId:String; 
			// Store previously Selected Particiapnt ID
			private var previouslySelectedParticipantId:String; 
			private var previouslySelectedParticipantBean:NameValueBean; 
			
			public var selectedNode:Object = new Object;
			 
			public var parentNode :Object = new Object;
			public var isEventHandled:Boolean = false;
			public var selectedParticipantIndex:Number = 0;
			public var tempCollection:ArrayCollection = new ArrayCollection();
	  
    public function initApp():void
    {
    	 ExternalInterface.addCallback("myFlexMethod",refreshTree);
	 	 ExternalInterface.addCallback("refreshParticipants",refreshParticipants);
		 ExternalInterface.addCallback("editParticipant",editParticipant);
    }
    
    
    /**
     iterateTreeNode function iterate over the childrens of cuurentNode recursively, 
     in Depth First search pattern
    */

    private function iterateTreeNode(currentNode:XML,currentParentNode:XML):Boolean
    {
	if(currentNode.@id == nodeIdToSelect)
	{
		// return true if node found
		selectedNode=currentNode;
		parentNode=currentParentNode;
		return true;
	 }

	//Get all descendents of curretnNode and recursively call same method
	 var descendantsList:XMLList = XMLList(currentNode.descendants());
	 for(var j:Number=0; j<descendantsList.length(); j++)
	 {
		if(iterateTreeNode(descendantsList[j],currentNode))
		{
			// expand the cuurentNode. this is required because to show the selected node all parent nodes 
			//has to be expanded
			specimenTree.expandItem(currentNode,true);
			return true;
		}
		
	 }
	return false;
    }

	/**
	This function iterated opver all SCG in tree. GEt one SCG and then call itereateode to iterate and find the 
	appropriate node to select. This function also expand teh Root paretn node, This is require to show the 
	seleceted node on UI else teh parent will not get expand but internally the node is in select state
	*/
    private function selectTreeNode():void
    {
		var scrollToTreeIndex:Number = 0;
		selectedNode=null;
		parentNode=null;
		/*
		nodeIdToSelect==""||nodeIdToSelect=="1" this case occurs when user goes from SCg page 
		to Speciemn summary page. IN this case select the SCG
		*/
		if((nodeIdToSelect==""||nodeIdToSelect=="1")&&previouslySelectednodeId!=null)
		{
			nodeIdToSelect=previouslySelectednodeId
		}
		if(nodeIdToSelect!=null)
		{
		      // get the treeData all childrens of ROOT
		      var xmlList:XMLListCollection = specimenTree.dataProvider as XMLListCollection;
		      for(var i:Number=0; i<xmlList.length; i++)
		      {
				  var xmlNode:XML = xmlList.getItemAt(i) as XML;
				  // call iterateNode to iterate all nodes fall under this Node
				  if(iterateTreeNode(xmlNode,xmlNode))
				  {
					// expand the parent node
					specimenTree.expandItem(xmlNode,true);
					scrollToTreeIndex=i;
					break;
				  }
		       }
		       if(selectedNode!=null&&parentNode!=null)
		       {
					 // expand the seletedNode
					 specimenTree.expandItem(selectedNode,true);
					 previouslySelectednodeId=selectedNode.@id;
					 specimenTree.selectedItem=selectedNode;
					 specimenTree.scrollToIndex(scrollToTreeIndex);
		       }
		}
    }

    private function treeHandler(tevent:ResultEvent):void
    {  
		var str:String = tevent.result as String;
		xmlString = new XML(str);
		treeData =  new XMLListCollection(xmlString.node);
		specimenTree.dataProvider = treeData;
		// validate the tree after changing teh dataProvider
		specimenTree.validateNow();
	
		for(var j:Number=0; j<treeData.length; j++)
		{
		var xmlNode:XML = treeData.getItemAt(j) as XML;
		setIcons(xmlNode);    	 
		}
		// call methid to show specidifed node selected
		selectTreeNode();
}

     /*
       This method is invoked from javaScript function when a new Participant is registered 
     
     */
   
    public function refreshParticipants():void
    {
		//Alert.show("In refresh Participants Method");    	
		var selectedCp : NameValueBean = new NameValueBean();
		selectedCp =  cpCombo.selectedItem as NameValueBean;
		var remoteObj1:RemoteObject =  new RemoteObject(); 
		remoteObj1.destination = "cdeService";
		var cpId :String = selectedCp.value;
		if(cpId == "-1")
		{
              Alert.show("Please select valid Collection Protocol");
              pCombo.dataProvider = null;
		}
		else
		{
			remoteObj1.getParticipantsList(selectedCp.value,selectedCp.name);
		}
		remoteObj1.addEventListener(ResultEvent.RESULT,participantHandler);
		remoteObj1.addEventListener("fault",faultHandler);
    }

    /*
     Sachin : This method is invoked when ever tree refreshes
    */
    public function refreshTree(nodeId:String):void
    {
   	  // set nodeIdToSelect to Id got from javaScript call. 
   	  // This nodeIdToSelect is used in selectNode and iterateNode function

   	   nodeIdToSelect = nodeId;
	   var selectedParticipant:NameValueBean= new NameValueBean();
	   // IF NodelID is empty then try to select previouslySelectedParticipant
	   // this case is handele for user goes form Pariticpant page to SCG
   	   if(nodeId==""&&previouslySelectedParticipantBean!=null)
   	   {
	    	selectedParticipant = previouslySelectedParticipantBean;
	   } 
	   else
	   {
	   		selectedParticipant = pCombo.selectedItem as NameValueBean;
	   }
	    var selectedCp : NameValueBean = new NameValueBean();
	    selectedCp =  cpCombo.selectedItem as NameValueBean;

		if(selectedParticipant != null && selectedCp != null)
		{
        var selectedParticipantId :String = selectedParticipant.value; 
	    var selectedCpId :String = selectedCp.value;
        //Here we can get data for updating specimen tree details for particular SCG/specimen instead of retrieving whole data 
         var remoteObj2:RemoteObject =  new RemoteObject(); 
	 	 remoteObj2.destination = "cdeService"; 
	 	 
         var str:String = remoteObj2.getTreeData(selectedCpId,selectedParticipantId);  
		 remoteObj2.addEventListener(ResultEvent.RESULT,treeHandler);
        
	     // specimenTree.validateNow();
         // specimenTree.dataProvider = treeData;
	     remoteObj2.addEventListener("fault",faultHandler);
      
        //Making a selected node appear when tree is displayed when dataProvider changes in cases of refresh 

       //Selecting a particular tree node on the basis of "id" attribute of  previously selected node  
  //        specimenTree.callLater(expandTree, [selectedNode, parentNode]); 
  }
   	}

  	private function expandTree(node:Object, pNode:Object) :void
  	{
       	specimenTree.expandChildrenOf(pNode, true);
   	   	specimenTree.selectedItem = node;
  	}
  
    /*
        getCpData()  method retrieves the Collection protocols before application initializes
    */
   	private function getCPData():void
  	{
  		
		var remoteObj:RemoteObject =  new RemoteObject(); 
		remoteObj.destination = "cdeService";
		remoteObj.getCpList();
		remoteObj.addEventListener(ResultEvent.RESULT,cpEventHandler); 		
  		remoteObj.addEventListener("fault",faultHandler);
  	}
  	
  	/*
  	   Collection Protocol	Event Handler Method 
  	*/
  	public function cpEventHandler(event:ResultEvent):void
  	{
  		var bean : NameValueBean = new NameValueBean();
		cpCollection = event.result as ArrayCollection;	
  	}
  	
   	/*
   		This Method is invoked on change of Collection Protocol & retrieves the associated Participants 
   	*/
  	public function onCpChange():void
	{
		var selectedCp : NameValueBean = new NameValueBean();
		selectedCp =  cpCombo.selectedItem as NameValueBean;
		var remoteObj1:RemoteObject =  new RemoteObject(); 
		remoteObj1.destination = "cdeService";
		var cpId :String = selectedCp.value;
		if(cpId == "-1")
		{
			Alert.show("Please select valid Collection Protocol");
			pCombo.dataProvider = null;
		}
		else
		{
			remoteObj1.getParticipantsList(selectedCp.value, selectedCp.name);
		}
		remoteObj1.addEventListener(ResultEvent.RESULT,participantHandler);
		remoteObj1.addEventListener("fault",faultHandler);
		specimenTree.dataProvider = null;
		spDetailsLabel.text = title;
	}
	
	/*
	  Event Handler for Participants 
	*/
	public function participantHandler(pevent:ResultEvent):void
	{
	    var bean : NameValueBean = new NameValueBean();
		pCollection = pevent.result as ArrayCollection;	
		pCombo.dataProvider = pCollection;
	}
	/*
	  Event Handler for Temp Collection
	*/
   	public function tempHandler(pevent:ResultEvent):void
	{	  
	    var bean : NameValueBean = null;
		tempCollection = pevent.result as ArrayCollection;
		var isRefresTree:Boolean = false;
		if(tempCollection.length != 0)
		{
			if(previouslySelectedParticipantId==null)
			{
				// Sachin : this case occurs if user selects the particpant on UI ie. onPartcipantClick()
				bean = tempCollection[selectedParticipantIndex] as NameValueBean;
		    }
		    else
		    {
		    	// Sachin : this case will ocur when user edit or register particpant
		    	for(var i:Number=0; i<tempCollection.length; i++)
	 			{
	 				bean = tempCollection[i] as NameValueBean;
	 				if(bean.value==previouslySelectedParticipantId)
	 				{
	 					selectedParticipantIndex=i;
	 					isRefresTree=true;
	 					break;	
	 				}
	 			}
		    }
		    pCombo.dataProvider = tempCollection;
		    pCombo.validateNow();
		    if(bean!=null)
		    {
				// Sachin : select particpant in the list and scorl the list position
				pCombo.selectedItem = bean;
				pCombo.scrollToIndex(selectedParticipantIndex);
				if(isRefresTree)
				{
					previouslySelectedParticipantBean=bean;
					spDetailsLabel.text = title+"  "+previouslySelectedParticipantBean.name;
					// nodeIdToSelect is obtainer from editParticipant() fucntion
					refreshTree(nodeIdToSelect);
				}	
			}	
			pCombo.validateNow();
		}
			
	}
    /*
      This mehtod invoked when a Participant is clicked
    */
   
    public function onParticipantClick():void
	{
	    var selectedParticipant:NameValueBean= new NameValueBean();
	    selectedParticipant = pCombo.selectedItem as NameValueBean
		if(selectedParticipant != null)
		{
	 	   var selectedParticipantId :String = selectedParticipant.value; 
	 	 
	 	   // Sachin : on particpant click set previosly selcetd node and participant to NULL
	 	   previouslySelectedParticipantId = null;
	 	   previouslySelectedParticipantBean=null;
	 	   previouslySelectednodeId=null;
	  	 
	  	   var selectedCp : NameValueBean = new NameValueBean();
	  	  	selectedCp =  cpCombo.selectedItem as NameValueBean;
		    var selectedCpId :String = selectedCp.value;
    	    selectedParticipantIndex = pCombo.selectedIndex;
	  
		   // title  = title +" "+selectedParticipant.name;
		     spDetailsLabel.text = title+"  "+selectedParticipant.name;
          
		   //Here we can get data for specimen tree details 
	
             var remoteObj2:RemoteObject =  new RemoteObject(); 
		     remoteObj2.destination = "cdeService"; 
    	     var str:String = remoteObj2.getTreeData(selectedCpId,selectedParticipantId);  
	    	 remoteObj2.addEventListener(ResultEvent.RESULT,treeHandler);
             remoteObj2.addEventListener("fault",faultHandler);

		     var refreshParticipants:String = "false";  
	   
         
	    
		    //invoking the java script method
	    	var url : URLRequest = new URLRequest("javascript: onParticipantClick('"+ selectedParticipantId + "','"+ selectedCpId + "','" + refreshParticipants+"')");
			navigateToURL(url,"_self");
		}
	}
	
    
 /*
     Tree Handler  Method
    */
    
   
    
    private function setIcons(xmlNode:XML) : void
    {
		var nodeType:String = xmlNode.@type;
		var participantRegStatus:String="";

		if(nodeType.match("Phase") || nodeType.match("Arm") || nodeType.match("Cycle"))
		{
			participantRegStatus = xmlNode.@participantRegStatus;;

		}
		if(nodeType.match("Phase"))
		{
			if(participantRegStatus.match("Pending"))
       		{
				specimenTree.setItemIcon(xmlNode, pendingPhaseCPIcon, pendingPhaseCPIcon);	  
       		}
       		else
       		{
				specimenTree.setItemIcon(xmlNode, phaseCPIcon, phaseCPIcon);	  
       		}
		}
		if(nodeType.match("Arm"))
		{
			if(participantRegStatus.match("Pending"))
       		{
       			specimenTree.setItemIcon(xmlNode, pendingArmCPIcon, pendingArmCPIcon);	  
       		}
       		else
       		{
				specimenTree.setItemIcon(xmlNode, armCPIcon, armCPIcon);	  
       		}
		}
		if(nodeType.match("Cycle"))
		{
			if(participantRegStatus.match("Pending"))
       		{
       			specimenTree.setItemIcon(xmlNode, pendingCycleCPIcon, pendingCycleCPIcon);	  
       		}
       		else
       		{
				specimenTree.setItemIcon(xmlNode, cycleCPIcon, cycleCPIcon);	  
       		}
		}
		if(nodeType.match("SpecimenCollectionGroup"))
		{
	    	var scgNodeId:String = xmlNode.@scgCollectionStatus;
			if(scgNodeId.match("Pending") || scgNodeId.match("Not Collected"))
       		{
       			specimenTree.setItemIcon(xmlNode, pendingSCGIcon, pendingSCGIcon);	  
			}
			else
			{
				specimenTree.setItemIcon(xmlNode, scgIcon, scgIcon);	  
			}
		}
		if(nodeType.match("Specimen"))
		{
			var childNodeId:String = xmlNode.@collectionStatus;
			if(childNodeId.match("Pending"))
       	  	{
       	  		specimenTree.setItemIcon(xmlNode, pendingSpecimenIcon, pendingSpecimenIcon);	  
       	  	}
			
		}
    	  	 //check for all descendents of SCG
    	 var descendantsList:XMLList = XMLList(xmlNode.descendants());

		for(var k:Number=0; k<descendantsList.length(); k++)
       	 {
       	   	var childNode:XML = XML(descendantsList[k]);
       	   	setIcons(childNode);
		 }
		


    }
    /*
      Sachin: Fuction to be called To refresh Participant Name after edit participant
    */
    public function editParticipant(selectedParticipantId:String,treeNodeId:String):void 
    {
    	// store participant id which is occurred by registering  or editing particpant selected by user
    	if(selectedParticipantId!=null && selectedParticipantId !="")
    	{
    		previouslySelectedParticipantId=selectedParticipantId;
    	}
    	// treeNodeId will be "" when user submit particpant OR click on register New Participant
    	// treeNodeId will conatind nodeid to select when user submit on SCG page 
    	nodeIdToSelect=treeNodeId;
    	
    	var selectedCp : NameValueBean = new NameValueBean();
 		selectedCp =  cpCombo.selectedItem as NameValueBean;
		var remoteObj1:RemoteObject =  new RemoteObject(); 
		remoteObj1.destination = "cdeService";
		var cpId :String = selectedCp.value;
		if(cpId == "-1")
		{
             Alert.show("Please select valid Collection Protocol");
             pCombo.dataProvider = null;
		}
		else
		{
	
			remoteObj1.getParticipantsList(selectedCp.value,selectedCp.name)
			remoteObj1.addEventListener(ResultEvent.RESULT,tempHandler);
			remoteObj1.addEventListener("fault",faultHandler);
   
        }       
        
    }
	
	 /*
            This function is to register a New Participant to CP  
  	 */
	 private function addNewParticipant():void
	 {
            
	     var selectedCp : NameValueBean = new NameValueBean();       
	     selectedCp =  cpCombo.selectedItem as NameValueBean;
	     var selectedCpId :String = selectedCp.value;         

	     // Set previosly node select to null.
         previouslySelectednodeId=null;   
	     var refreshParticipants:String = "true";
	    //invoking the java script method
	    var url : URLRequest = new URLRequest("javascript: RegisterParticipants('"+ selectedCpId +"','"+refreshParticipants+"')");
	    navigateToURL(url,"_self");  
	   
	 }

         /*
           This method is invoked on click of specimen tree node
	 */
	 private function onNodeClick():void
	 {
		if(specimenTree.selectedItem != null)
		{
	    	var type:String = specimenTree.selectedItem.@type;
	    	if(type.match("Phase") || type.match("Arm") || type.match("Cycle"))
	    	{
	    		chkForCollectionProtocolType(type);
	    	}
	    	else
	    	{
		   		//Retrieving the selected node id 
		 	    var id : String = specimenTree.selectedItem.@id;
		 	    previouslySelectednodeId=id;
		 	   //Selected CP and selected participants
		 	   var selectedParticipant:NameValueBean= new NameValueBean();
	    	   selectedParticipant = pCombo.selectedItem as NameValueBean
		  	   var selectedParticipantId :String = selectedParticipant.value; 
		   	   var selectedCp : NameValueBean = new NameValueBean();
	    	   selectedCp =  cpCombo.selectedItem as NameValueBean;
			   var selectedCpId :String = selectedCp.value;
				//display name of selected tree node
		    	var displayName : String = specimenTree.selectedItem.@name;
		    	if(type.match("SpecimenCollectionGroup"))
			    	displayName = displayName+"@"+specimenTree.selectedItem.@evtDate;
	    	

	    	   //invoking java script method
		    	var url : URLRequest = new URLRequest("javascript: tonclick('"+ id +"','"+ selectedCpId + "','"+ selectedParticipantId +"','"+ displayName +"')");
		    	navigateToURL(url,"_self"); 
			
			}
		 } 
	}
          
     private function chkForCollectionProtocolType(type:String):void
     {
	 	var remoteObj1:RemoteObject =  new RemoteObject(); 
		remoteObj1.destination = "cdeService";

		var id : String = specimenTree.selectedItem.@id;
		 //Selected CP and selected participants
		var selectedParticipant:NameValueBean= new NameValueBean();
	    selectedParticipant = pCombo.selectedItem as NameValueBean
		var selectedParticipantId :String = selectedParticipant.value; 
	   	var type:String = specimenTree.selectedItem.@type;
		var selectedCpId:String = "-1";
	   	var index:int =id.indexOf("_");
	   	if(index != -1)
	   	{
	   		selectedCpId = id.substr(index+1);
 	
	   	}
		if(type.match("Arm"))
		{	
			remoteObj1.chkArmShifting(selectedCpId,selectedParticipantId);
			remoteObj1.addEventListener(ResultEvent.RESULT,armChkHandler);
			remoteObj1.addEventListener("fault",faultHandler);
		}
		else
		{
			onCollectionProtolcolNodeClick();
		}
		
     }     
    	/*
	  Event Handler for Temp Collection
	*/
   	public function armChkHandler(pevent:ResultEvent):void
	{	  
	    var chk : Boolean = pevent.result as Boolean;
	    if(chk == true)
	    {
	    	Alert.show("Participant is already registered on one arm. You want to create a new registration and change the status of the Specimen collection groups under which no specimen have been collected in the old arm to Not Collected.",
				"Arm Registration",Alert.OK | Alert.CANCEL,this,armChkHandlerAlertListener,null,Alert.OK);
	    }
	    else
	    {
	    	onCollectionProtolcolNodeClick();
	    	
	    }
			
	}
	private function onCollectionProtolcolNodeClick():void
	{
			var id : String = specimenTree.selectedItem.@id;
		    //Selected CP and selected participants
		    var selectedParticipant:NameValueBean= new NameValueBean();
	    	selectedParticipant = pCombo.selectedItem as NameValueBean
		    var selectedParticipantId :String = selectedParticipant.value; 

			 var selectedParentCp : NameValueBean = new NameValueBean();
	    	 selectedParentCp =  cpCombo.selectedItem as NameValueBean;
			  var selectedParentCpId :String = selectedParentCp.value;
	    	var type:String = specimenTree.selectedItem.@type;
			var selectedCpId:String = "-1";
	    	var index:int =id.indexOf("_");
	    	if(index != -1)
	    	{
	    		selectedCpId = id.substr(index+1);
 		
	    	}
	    	var displayName:String = selectedParentCpId+":"+specimenTree.selectedItem.@regDate;
				
	    	
          	var url : URLRequest = new URLRequest("javascript: tonclick('"+ id +"','"+ selectedCpId + "','"+ selectedParticipantId +"','"+ displayName +"')");
		    navigateToURL(url,"_self"); 
	}
	private function armChkHandlerAlertListener(eventObj:CloseEvent):void             
	{
         // Check to see if the OK button was pressed.
          if (eventObj.detail==Alert.OK) 
          {
          	 onCollectionProtolcolNodeClick();
          }
    }

      
          /*
             To resize the frames
	  */
    /*  private function resize():void
	  {
          	if(sdPanel.percentHeight.toString()=="10")
	      	{
		     	cpPanel.percentHeight = 12.5;
		     	resizeButton.setStyle("icon",plusIcon)
			resizeButton.toolTip = "Click to see all the participants";
		     	pPanel.percentHeight=19.5;
		     	sdPanel.percentHeight=68;
		     	pCombo.height=20;
			   
	        }
	      	else
	      	{
	         	cpPanel.percentHeight = 12.5;
	         	resizeButton.setStyle("icon",minusIcon) 
		 	resizeButton.toolTip = "Click to collapse";
			sdPanel.percentHeight = 10;
			pPanel.percentHeight = 77.5;
		        pCombo.percentHeight = 100;
		}
	 } */


  	 
  	 /*
  	  Fault Handler
  	*/
  	public function faultHandler (event:FaultEvent):void 
	{
		// Deal with event.fault.faultString
		Alert.show(event.fault.faultString, 'Error');
	}
	
   /* public function openSelectedNode():void
    {
    	Alert("In open selected node method");
    	if(selectedNode != null)
    	{
    		Alert.show("In if statement & selected node is:"+selectedNode);
    		specimenTree.selectedItem = selectedNode;
    	}
    	else
    	{
    		Alert.show("Selected node is null");
    	}
    }*/
   
    	
    /*
       This mehod is for adding toolTip for each tree node
    */
    
    public function addToolTip(item:Object):String
    {
    	
	     var node:XML = XML(item);
       	 return node.@toolTip; 
    }
  		
  	]]>
  </mx:Script>

  

     <mx:Box direction="vertical" borderThickness="10" borderSides="#000000" borderStyle="solid" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0" width="100%" height="100%">
      	<mx:VBox backgroundAlpha="0.1" width="100%" height="5%" backgroundColor="#FFFFFF"  >
             <mx:Label text="Collection Protocol:" width="100%" height="14" color="black" fontWeight="bold"/>
              <mx:ComboBox width="100%" id="cpCombo" dataProvider="{cpCollection}"  labelField="name" change="onCpChange()" prompt="--Select--"/>
        </mx:VBox>
        
        <mx:VBox width="100%" height="95%">
            <mx:VDividedBox width="100%" height="100%">
                <mx:VBox width="100%" height="30%" id="pVbox" borderSides="black">
                   	<mx:HBox backgroundColor="#FFFFFF" width="100%"> 
                     	<mx:Label text="Participant (Protocol ID):" color="black" fontWeight="bold" height="15"/> 	
                     	<mx:Button toolTip="Click to  register new Participant" label="Register New" color="black" click="addNewParticipant();" height="15"/>
                   	 
                   	 </mx:HBox>
                   	 <mx:List id="pCombo" width="100%" rowCount="1" height="100%"  labelField="name" click="onParticipantClick()"/>
                 </mx:VBox>
        	     <mx:VBox height="70%" width="100%" id="spDetailVbox">
                   	<mx:Label id="spDetailsLabel" text="{title}" color="black" width="100%" height="15" fontWeight="bold" />
                   	<mx:Tree id="specimenTree" labelField="@name" width="100%" height="100%" click="onNodeClick()" folderClosedIcon="@Embed(source='/images/Specimen.gif')" folderOpenIcon="@Embed(source='/images/Specimen.gif')" 
                   		 defaultLeafIcon="@Embed(source='/images/Specimen.gif')" disclosureClosedIcon="@Embed(source='/images/nolines_plus.gif')" disclosureOpenIcon="@Embed(source='/images/nolines_minus.gif')" showDataTips="true" dataTipFunction="addToolTip"/>
                 </mx:VBox>
                </mx:VDividedBox>    
         </mx:VBox>
    	
    </mx:Box> 

   <mx:Style>
		    Tree{
              folderClosedIcon:Embed(source='/images/Specimen.gif'); 
			  folderOpenIcon:Embed(source='/images/Specimen.gif');
			  defaultLeafIcon:Embed(source='/images/Specimen.gif');
			  disclosureClosedIcon:Embed(source='/images/nolines_plus.gif');
              
			  disclosureOpenIcon:Embed(source='/images/nolines_minus.gif');
		   }
		 </mx:Style>
		 
</mx:Application>