<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" preinitialize="getCPData()" height="90%" width="70%" backgroundColor="#FFFFFF" creationComplete="initApp();">
  <mx:Script>
  	<![CDATA[
  		import mx.core.Container;
  		import mx.events.MoveEvent;
  		import mx.events.TreeEvent;
  		import mx.collections.ArrayCollection;
		import valueobjects.NameValueBean;
		import mx.controls.Alert;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.remoting.RemoteObject;
		import mx.validators.ValidationResult;
		import flash.utils.getQualifiedClassName;
	    import mx.collections.XMLListCollection;
		import flash.xml.*;
		import mx.events.FlexEvent;

    [Bindable]
		public var cpCollection:ArrayCollection = new ArrayCollection();
    [Bindable]
                public var pCollection:ArrayCollection = new ArrayCollection(); 
  
   
                 private var xmlString:XML = new XML();
   
    
                 private var treeData:XMLListCollection = new XMLListCollection();

      [Bindable]
                 [Embed(source='/images/nolines_minus.gif')]
                 private var minusIcon:Class; 
	    
     [Bindable]
                 [Embed(source='/images/nolines_plus.gif')]
                 private var plusIcon:Class;  
 
     [Bindable]
                [Embed(source='/images/SpecimenCollectionGroup.gif')]
                private var scgIcon:Class;  

    [Bindable]
         		[Embed(source='/images/Specimen.gif')] 
         		public var spIcon:Class;  
     [Bindable] 
                [Embed(source="/images/graydot.gif")]
                public var fscgIcon:Class;  

   
    [Bindable]
  	       private var title:String = "Specimen Details for"; 

              public var selectedNode:Object = new Object;
 
              public var parentNode :Object = new Object;
              public var isEventHandled:Boolean = false;
	  
    public function initApp():void
    {
    	 ExternalInterface.addCallback("myFlexMethod",refreshTree);
	 	 ExternalInterface.addCallback("refreshParticipants",refreshParticipants);
    }
    
     /*
       This method is invoked from javaScript function when a new Participant is registered 
     
     */
   
    public function refreshParticipants():void
    {
		//Alert.show("In refresh Participants Method");    	
		var selectedCp : NameValueBean = new NameValueBean();
		selectedCp =  cpCombo.selectedItem as NameValueBean;
		var remoteObj1:RemoteObject =  new RemoteObject(); 
		remoteObj1.destination = "cdeService";
		var cpId :String = selectedCp.value;
		if(cpId == "-1")
		{
              Alert.show("Please select valid Collection Protocol");
              pCombo.dataProvider = null;
		}
		else
		{
			remoteObj1.getParticipantsList(selectedCp.value,selectedCp.name);
		}
		remoteObj1.addEventListener(ResultEvent.RESULT,participantHandler);
		remoteObj1.addEventListener("fault",faultHandler);
    }

    /*
     This method is invoked when ever tree refreshes
    */
    public function refreshTree(nodeId:String):void
    {
   	   
   	    var selectedParticipant:NameValueBean= new NameValueBean();
	    selectedParticipant = pCombo.selectedItem as NameValueBean
        var selectedParticipantId :String = selectedParticipant.value; 
	
        var selectedCp : NameValueBean = new NameValueBean();
	    selectedCp =  cpCombo.selectedItem as NameValueBean;
	    var selectedCpId :String = selectedCp.value;
      

        //Here we can get data for updating specimen tree details for particular SCG/specimen instead of retrieving whole data 
         var remoteObj2:RemoteObject =  new RemoteObject(); 
	 	 remoteObj2.destination = "cdeService"; 
         var str:String = remoteObj2.getTreeData(selectedCpId,selectedParticipantId);  
		 remoteObj2.addEventListener(ResultEvent.RESULT,treeHandler);
        
	     // specimenTree.validateNow();
         // specimenTree.dataProvider = treeData;
	     remoteObj2.addEventListener("fault",faultHandler);
      
        //Making a selected node appear when tree is displayed when dataProvider changes in cases of refresh 

       //Selecting a particular tree node on the basis of "id" attribute of  previously selected node  
       for(var i:Number=0; i<treeData.length; i++)
       {
       	  var xmlNode:XML = treeData.getItemAt(i) as XML;
       	  if(xmlNode.@id == nodeId)
       	  {
       	  	  selectedNode = xmlNode;
		  	  parentNode = xmlNode; 
       	   	  break;
       	  }
       	  else
       	  {
       	  	 //check for all descendents
       	  	 var descendantsList:XMLList = XMLList(xmlNode.descendants());
       	  	 for(var j:Number=0; j<descendantsList.length(); j++)
       	  	 {
       	  	 	if(descendantsList[j].@id == nodeId)
       	  	 	{
       	  	 		selectedNode = XML(descendantsList[j]);
       	  	 		parentNode = treeData.getItemAt(i) as XML;
				
       	  	 		break;
       	  	 	}
       	  	 }
       	  }
       	} 
        specimenTree.callLater(expandTree, [selectedNode, parentNode]); 
   	}

  	private function expandTree(node:Object, pNode:Object) :void
  	{
       	specimenTree.expandChildrenOf(pNode, true);
   	   	specimenTree.selectedItem = node;
  	}
  
    /*
        getCpData()  method retrieves the Collection protocols before application initializes
    */
   	private function getCPData():void
  	{
  		
		var remoteObj:RemoteObject =  new RemoteObject(); 
		remoteObj.destination = "cdeService";
		remoteObj.getCpList();
		remoteObj.addEventListener(ResultEvent.RESULT,cpEventHandler); 		
  		remoteObj.addEventListener("fault",faultHandler);
  	}
  	
  	/*
  	   Collection Protocol	Event Handler Method 
  	*/
  	public function cpEventHandler(event:ResultEvent):void
  	{
  		var bean : NameValueBean = new NameValueBean();
		cpCollection = event.result as ArrayCollection;	
  	}
  	
   	/*
   		This Method is invoked on change of Collection Protocol & retrieves the associated Participants 
   	*/
  	public function onCpChange():void
	{
		var selectedCp : NameValueBean = new NameValueBean();
		selectedCp =  cpCombo.selectedItem as NameValueBean;
		var remoteObj1:RemoteObject =  new RemoteObject(); 
		remoteObj1.destination = "cdeService";
		var cpId :String = selectedCp.value;
		if(cpId == "-1")
		{
			Alert.show("Please select valid Collection Protocol");
			pCombo.dataProvider = null;
		}
		else
		{
			remoteObj1.getParticipantsList(selectedCp.value, selectedCp.name);
		}
		remoteObj1.addEventListener(ResultEvent.RESULT,participantHandler);
		remoteObj1.addEventListener("fault",faultHandler);
		specimenTree.dataProvider = null;
		spDetailsLabel.text = title;
	}
	
	/*
	  Event Handler for Participants 
	*/
	public function participantHandler(pevent:ResultEvent):void
	{
	    var bean : NameValueBean = new NameValueBean();
		pCollection = pevent.result as ArrayCollection;	
	}
   
    /*
      This mehtod invoked when a Participant is clicked
    */
   
    public function onParticipantClick():void
	{
	    var selectedParticipant:NameValueBean= new NameValueBean();
	    selectedParticipant = pCombo.selectedItem as NameValueBean
	    var selectedParticipantId :String = selectedParticipant.value; 
	    var selectedCp : NameValueBean = new NameValueBean();
	    selectedCp =  cpCombo.selectedItem as NameValueBean;
	    var selectedCpId :String = selectedCp.value;
	  
	   // title  = title +" "+selectedParticipant.name;
	     spDetailsLabel.text = title+"  "+selectedParticipant.name;
          
	   //Here we can get data for specimen tree details 

             var remoteObj2:RemoteObject =  new RemoteObject(); 
	     remoteObj2.destination = "cdeService"; 
    	     var str:String = remoteObj2.getTreeData(selectedCpId,selectedParticipantId);  
	     remoteObj2.addEventListener(ResultEvent.RESULT,treeHandler);
             remoteObj2.addEventListener("fault",faultHandler);

	     var refreshParticipants:String = "false";  
	    //specimenTree.dataProvider = null;
	   /* isEventHandled = false;
	    Alert.show(treeData.toString());
	    specimenTree.dataProvider = treeData;
	    
	    for(var i:int=0; i<treeData.length; i++)
    	    {
    	    var node:XML = treeData.getItemAt(i) as XML;
    	    var nodeId:String = node.@id;
    	    
    	    if(nodeId.match("future"))
    	    {
    	    	
    	        specimenTree.setItemIcon(treeData.getItemAt(i), fscgIcon, fscgIcon);
    	    }
    	    else
    	    {
    	        specimenTree.setItemIcon(treeData.getItemAt(i),scgIcon,scgIcon);	
    	    }
    	 }*/
	    
	    //invoking the java script method
	    var url : URLRequest = new URLRequest("javascript: onParticipantClick('"+ selectedParticipantId + "','"+ selectedCpId + "','" + refreshParticipants+"')");
		navigateToURL(url,"_self");
	}
	
    
    /*
     Tree Handler  Method
    */
    
    private function treeHandler(tevent:ResultEvent):void
    {
	  
	    var str:String = tevent.result as String;
	    xmlString = new XML(str);
	    treeData =  new XMLListCollection(xmlString.node);

	    specimenTree.dataProvider = treeData;
	    
	    for(var i:int=0; i<treeData.length; i++)
    	    {
    	    var node:XML = treeData.getItemAt(i) as XML;
    	    var nodeId:String = node.@id;
    	    
    	    if(nodeId.match("future"))
    	    {
    	    	
    	        specimenTree.setItemIcon(treeData.getItemAt(i), fscgIcon, fscgIcon);
    	    }
    	    else
    	    {
    	        specimenTree.setItemIcon(treeData.getItemAt(i),scgIcon,scgIcon);	
    	    }
    	 }
    	 
    	 /* if(selectedNode != null || parentNode != null)
	      {
	      	specimenTree.callLater(expandTree, [selectedNode, parentNode]);   
	      }*/
    	 
    	
    }
	
	 /*
            This function is to register a New Participant to CP  
  	 */
	 private function addNewParticipant():void
	 {
            
	     var selectedCp : NameValueBean = new NameValueBean();       
	     selectedCp =  cpCombo.selectedItem as NameValueBean;
	     var selectedCpId :String = selectedCp.value;         
            
	     var refreshParticipants:String = "true";
	    //invoking the java script method
	    var url : URLRequest = new URLRequest("javascript: RegisterParticipants('"+ selectedCpId +"','"+refreshParticipants+"')");
	    navigateToURL(url,"_self");  
	   
	 }

         /*
           This method is invoked on click of specimen tree node
	 */
	 private function onNodeClick():void
	 {
       
	    //Retrieving the selected node id 
	    var id : String = specimenTree.selectedItem.@id;

	    //Selected CP and selected participants
	    var selectedParticipant:NameValueBean= new NameValueBean();
	    selectedParticipant = pCombo.selectedItem as NameValueBean
	    var selectedParticipantId :String = selectedParticipant.value; 
	    var selectedCp : NameValueBean = new NameValueBean();
	    selectedCp =  cpCombo.selectedItem as NameValueBean;
	    var selectedCpId :String = selectedCp.value;
	    
	    //display name of selected tree node
	    var displayName : String = specimenTree.selectedItem.@name;
	    
	   //invoking java script method
	    var url : URLRequest = new URLRequest("javascript: tonclick('"+ id +"','"+ selectedCpId + "','"+ selectedParticipantId +"','"+ displayName +"')");
	       navigateToURL(url,"_self"); 
	       
	}
          
          /*
             To resize the frames
	  */
    /*  private function resize():void
	  {
          	if(sdPanel.percentHeight.toString()=="10")
	      	{
		     	cpPanel.percentHeight = 12.5;
		     	resizeButton.setStyle("icon",plusIcon)
			resizeButton.toolTip = "Click to see all the participants";
		     	pPanel.percentHeight=19.5;
		     	sdPanel.percentHeight=68;
		     	pCombo.height=20;
			   
	        }
	      	else
	      	{
	         	cpPanel.percentHeight = 12.5;
	         	resizeButton.setStyle("icon",minusIcon) 
		 	resizeButton.toolTip = "Click to collapse";
			sdPanel.percentHeight = 10;
			pPanel.percentHeight = 77.5;
		        pCombo.percentHeight = 100;
		}
	 } */


  	 
  	 /*
  	  Fault Handler
  	*/
  	public function faultHandler (event:FaultEvent):void 
	{
		// Deal with event.fault.faultString
		Alert.show(event.fault.faultString, 'Error');
	}
	
   /* public function openSelectedNode():void
    {
    	Alert("In open selected node method");
    	if(selectedNode != null)
    	{
    		Alert.show("In if statement & selected node is:"+selectedNode);
    		specimenTree.selectedItem = selectedNode;
    	}
    	else
    	{
    		Alert.show("Selected node is null");
    	}
    }*/
   
    	
    /*
       This mehod is for adding toolTip for each tree node
    */
    
    public function addToolTip(item:Object):String
    {
    	
	     var node:XML = XML(item);
       	 return node.@toolTip; 
    }
  		
  	]]>
  </mx:Script>

  

     <mx:Box direction="vertical" borderThickness="10" borderSides="#000000" borderStyle="solid" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0" width="100%" height="100%">
      	<mx:VBox backgroundAlpha="0.1" width="100%" height="5%" backgroundColor="#FFFFFF"  >
             <mx:Label text="Collection Protocol:" width="100%" height="14" color="black" fontWeight="bold"/>
              <mx:ComboBox width="100%" id="cpCombo" dataProvider="{cpCollection}"  labelField="name" change="onCpChange()" prompt="--Select--"/>
        </mx:VBox>
        
        <mx:VBox width="100%" height="95%">
            <mx:VDividedBox width="100%" height="100%">
                <mx:VBox width="100%" height="13.5%" id="pVbox" borderSides="black">
                   	<mx:HBox backgroundColor="#FFFFFF" width="100%"> 
                     	<mx:Label text="Participant (Protocol ID):" color="black" fontWeight="bold" height="15"/> 	
                     	<mx:Button toolTip="Click to  register new Participant" label="Register New" color="black" click="addNewParticipant();" height="15"/>
                   	 
                   	 </mx:HBox>
                   	 <mx:List id="pCombo" width="100%" rowCount="1" height="100%" dataProvider="{pCollection}" labelField="name" click="onParticipantClick()"/>
                 </mx:VBox>
        	     <mx:VBox height="86.5%" width="100%" id="spDetailVbox">
                   	<mx:Label id="spDetailsLabel" text="{title}" color="black" width="100%" height="15" fontWeight="bold" />
                   	<mx:Tree id="specimenTree" labelField="@name" width="100%" height="100%" click="onNodeClick()" folderClosedIcon="@Embed(source='/images/Specimen.gif')" folderOpenIcon="@Embed(source='/images/Specimen.gif')" 
                   		 defaultLeafIcon="@Embed(source='/images/Specimen.gif')" disclosureClosedIcon="@Embed(source='/images/nolines_plus.gif')" disclosureOpenIcon="@Embed(source='/images/nolines_minus.gif')" showDataTips="true" dataTipFunction="addToolTip"/>
                 </mx:VBox>
                </mx:VDividedBox>    
         </mx:VBox>
    	
    </mx:Box> 

   <mx:Style>
		    Tree{
              folderClosedIcon:Embed(source='/images/Specimen.gif'); 
			  folderOpenIcon:Embed(source='/images/Specimen.gif');
			  defaultLeafIcon:Embed(source='/images/Specimen.gif');
			  disclosureClosedIcon:Embed(source='/images/nolines_plus.gif');
              
			  disclosureOpenIcon:Embed(source='/images/nolines_minus.gif');
		   }
		 </mx:Style>
		 
</mx:Application>